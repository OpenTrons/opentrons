/**
 * Flowtype definitions for robotStateFixtures
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.13.0
 * @flow
 */

import {
  TEMPERATURE_APPROACHING_TARGET,
  TEMPERATURE_AT_TARGET,
  TEMPERATURE_DEACTIVATED,
} from "../constants";
import type {
  Config,
  InvariantContext,
  RobotState,
  RobotStateAndWarnings,
} from "../";
declare export var DEFAULT_CONFIG: Config;
declare type WellTipState = { [key: string]: boolean };
declare export function getTiprackTipstate(
  filled: boolean | null | void
): WellTipState;
declare export function getTipColumn<T>(
  index: number,
  filled: T
): { [key: string]: T };
declare export function makeContext(): InvariantContext;
declare export var makeState: (args: {
  invariantContext: InvariantContext,
  labwareLocations: $PropertyType<RobotState, "labware">,
  moduleLocations?: $PropertyType<RobotState, "modules">,
  pipetteLocations: $PropertyType<RobotState, "pipettes">,
  tiprackSetting: { [key: string]: boolean },
}) => RobotState;
declare type StandardMakeStateArgs = {|
  pipetteLocations: $PropertyType<RobotState, "pipettes">,
  labwareLocations: $PropertyType<RobotState, "labware">,
  moduleLocations: $PropertyType<RobotState, "modules">,
|};
declare export var makeStateArgsStandard: () => StandardMakeStateArgs;
declare export var getInitialRobotStateStandard: (
  invariantContext: InvariantContext
) => RobotState;
declare export var getRobotStateAndWarningsStandard: (
  invariantContext: InvariantContext
) => RobotStateAndWarnings;
declare export var getRobotStateWithTipStandard: (
  invariantContext: InvariantContext
) => RobotState;
declare export var getRobotStatePickedUpTipStandard: (
  invariantContext: InvariantContext
) => RobotState;
declare export var getRobotInitialStateNoTipsRemain: (
  invariantContext: InvariantContext
) => RobotState;
declare type StateAndContext = {|
  robotState: RobotState,
  invariantContext: InvariantContext,
|};
declare export var getStateAndContextTempTCModules: (x: {
  temperatureModuleId: string,
  thermocyclerId: string,
}) => StateAndContext;
declare export var robotWithStatusAndTemp: (
  robotState: RobotState,
  temperatureModuleId: string,
  status:
    | typeof TEMPERATURE_AT_TARGET
    | typeof TEMPERATURE_APPROACHING_TARGET
    | typeof TEMPERATURE_DEACTIVATED,
  targetTemperature: number | null
) => RobotState;
declare export {};
