/**
 * Flowtype definitions for commandFixtures
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.13.0
 * @flow
 */

import type {
  AirGapParams,
  AspirateParams,
  BlowoutParams,
  DispenseParams,
  TouchTipParams,
} from "@opentrons/shared-data/protocol/types/schemaV3";
import type { Command } from "@opentrons/shared-data/protocol/types/schemaV6";
import type {
  CommandsAndWarnings,
  CommandCreatorErrorResponse,
} from "../types";

/**
 * Used to wrap command creators in tests, effectively casting their results
 * *  to normal response or error response
 */
declare export function getSuccessResult(
  result: CommandsAndWarnings | CommandCreatorErrorResponse
): CommandsAndWarnings;
declare export function getErrorResult(
  result: CommandsAndWarnings | CommandCreatorErrorResponse
): CommandCreatorErrorResponse;
declare export var replaceTipCommands: (tip: number | string) => Command[];
declare export var BLOWOUT_FLOW_RATE: any; // 2.3
declare export var ASPIRATE_OFFSET_FROM_BOTTOM_MM: any; // 3.1
declare export var DISPENSE_OFFSET_FROM_BOTTOM_MM: any; // 3.2
declare export var BLOWOUT_OFFSET_FROM_TOP_MM: any; // 3.3
declare type FlowRateAndOffsetParamsTransferlike = {|
  aspirateFlowRateUlSec: number,
  dispenseFlowRateUlSec: number,
  blowoutFlowRateUlSec: number,
  aspirateOffsetFromBottomMm: number,
  dispenseOffsetFromBottomMm: number,
  blowoutOffsetFromTopMm: number,
  touchTipAfterAspirateOffsetMmFromBottom: number,
  touchTipAfterDispenseOffsetMmFromBottom: number,
|};
declare export var getFlowRateAndOffsetParamsTransferLike: () => FlowRateAndOffsetParamsTransferlike;
declare type FlowRateAndOffsetParamsMix = {|
  aspirateFlowRateUlSec: number,
  dispenseFlowRateUlSec: number,
  blowoutFlowRateUlSec: number,
  aspirateOffsetFromBottomMm: number,
  dispenseOffsetFromBottomMm: number,
  blowoutOffsetFromTopMm: number,
  touchTipMmFromBottom: number,
|};
declare export var getFlowRateAndOffsetParamsMix: () => FlowRateAndOffsetParamsMix;
declare export var DEFAULT_PIPETTE: any; // "p300SingleId"
declare export var MULTI_PIPETTE: any; // "p300MultiId"
declare export var SOURCE_LABWARE: any; // "sourcePlateId"
declare export var DEST_LABWARE: any; // "destPlateId"
declare export var TROUGH_LABWARE: any; // "troughId"
declare export var FIXED_TRASH_ID: any; // "trashId"
declare export var DEFAULT_BLOWOUT_WELL: any; // "A1"
declare type MakeAspDispHelper<P> = (
  bakedParams?: $Rest<P, {}>
) => (well: string, volume: number, params?: $Rest<P, {}>) => Command;
declare type MakeAirGapHelper<P> = (
  bakedParams: $Rest<P, {}> & {
    offsetFromBottomMm: number,
  }
) => (well: string, volume: number, params?: $Rest<P, {}>) => Command;
declare type MakeDispenseAirGapHelper<P> = MakeAirGapHelper<P>;
declare export var makeAspirateHelper: MakeAspDispHelper<AspirateParams>;
declare export var makeAirGapHelper: MakeAirGapHelper<AirGapParams>;
declare export var blowoutHelper: (
  labware?: string | null | void,
  params?: $Rest<BlowoutParams, {}> | void
) => Command;
declare export var makeDispenseHelper: MakeAspDispHelper<DispenseParams>;
declare export var makeDispenseAirGapHelper: MakeDispenseAirGapHelper<AirGapParams>;
declare type MakeTouchTipHelper = (
  bakedParams?: $Rest<TouchTipParams, {}>
) => (well: string, params?: $Rest<TouchTipParams, {}>) => Command;
declare export var makeTouchTipHelper: MakeTouchTipHelper;
declare export var delayCommand: (seconds: number) => Command;
declare export var delayWithOffset: (
  well: string,
  labware: string,
  seconds?: number | void,
  zOffset?: number | void
) => Command[];
declare export var dropTipHelper: (
  well: string,
  params?: {
    pipette?: string | void,
    labware?: string | void,
  } | void
) => Command;
declare export var pickUpTipHelper: (
  tip: number | string,
  params?: {
    pipette?: string | void,
    labware?: string | void,
  } | void
) => Command;
declare export {};
