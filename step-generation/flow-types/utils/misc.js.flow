/**
 * Flowtype definitions for misc
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.13.0
 * @flow
 */

import type { LabwareDefinition2 } from "@opentrons/shared-data";
import type { BlowoutParams } from "@opentrons/shared-data/protocol/types/schemaV4";
import type {
  CurriedCommandCreator,
  InvariantContext,
  LocationLiquidState,
  RobotState,
  SourceAndDest,
} from "../types";
declare export var AIR: "__air__";
declare export var SOURCE_WELL_BLOWOUT_DESTINATION: "source_well";
declare export var DEST_WELL_BLOWOUT_DESTINATION: "dest_well";
declare export function repeatArray<T>(array: T[], repeats: number): T[];

/**
 * Total volume of a location ("air" is not included in the sum)
 */
declare export function getLocationTotalVolume(
  loc: LocationLiquidState
): number;

/**
 * Breaks a liquid volume state into 2 parts. Assumes all liquids are evenly mixed.
 */
declare export function splitLiquid(
  volume: number,
  sourceLiquidState: LocationLiquidState
): SourceAndDest;

/**
 * The converse of splitLiquid. Adds all of one liquid to the other.
 * The args are called 'source' and 'dest', but here they're interchangable.
 */
declare export function mergeLiquid(
  source: LocationLiquidState,
  dest: LocationLiquidState
): LocationLiquidState;
declare export function getWellsForTips(
  channels: 1 | 8,
  labwareDef: LabwareDefinition2,
  well: string
): {
  wellsForTips: string[],
  allWellsShared: boolean,
};
declare export var blowoutUtil: (args: {
  pipette: $PropertyType<BlowoutParams, "pipette">,
  sourceLabwareId: string,
  sourceWell: $PropertyType<BlowoutParams, "well">,
  destLabwareId: string,
  destWell: $PropertyType<BlowoutParams, "well">,
  blowoutLocation: string | null | void,
  flowRate: number,
  offsetFromTopMm: number,
  invariantContext: InvariantContext,
}) => CurriedCommandCreator[];
declare export function createEmptyLiquidState(
  invariantContext: InvariantContext
): $PropertyType<RobotState, "liquidState">;
declare export function createTipLiquidState<T>(
  channels: number,
  contents: T
): { [key: string]: T };
declare export var getDispenseAirGapLocation: (args: {
  blowoutLocation: string | null | void,
  sourceLabware: string,
  destLabware: string,
  sourceWell: string,
  destWell: string,
}) => {
  dispenseAirGapLabware: string,
  dispenseAirGapWell: string,
};
declare export function makeInitialRobotState(args: {
  invariantContext: InvariantContext,
  labwareLocations: $PropertyType<RobotState, "labware">,
  moduleLocations: $PropertyType<RobotState, "modules">,
  pipetteLocations: $PropertyType<RobotState, "pipettes">,
}): RobotState;
