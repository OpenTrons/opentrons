{
  "commands": [],
  "config": {
    "protocolType": "json",
    "schemaVersion": 4
  },
  "createdAt": "TIMESTAMP",
  "errors": [
    {
      "createdAt": "TIMESTAMP",
      "detail": "Unresolvable JSON pointer: 'definitions/slot'",
      "errorCode": "4000",
      "errorInfo": {},
      "errorType": "UnexpectedAnalysisError",
      "id": "UUID",
      "isDefined": false,
      "wrappedErrors": [
        {
          "createdAt": "TIMESTAMP",
          "detail": "jsonschema.exceptions._RefResolutionError: Unresolvable JSON pointer: 'definitions/slot'",
          "errorCode": "4000",
          "errorInfo": {
            "args": "(\"Unresolvable JSON pointer: 'definitions/slot'\",)",
            "class": "_RefResolutionError",
            "traceback": "  File \"/usr/local/lib/python3.10/site-packages/opentrons/cli/analyze.py\", line N, in _do_analyze\n    await orchestrator.load(\n\n  File \"/usr/local/lib/python3.10/site-packages/opentrons/protocol_runner/run_orchestrator.py\", line N, in load\n    await self._protocol_runner.load(\n\n  File \"/usr/local/lib/python3.10/site-packages/opentrons/protocol_runner/protocol_runner.py\", line N, in load\n    protocol = self._protocol_file_reader.read(\n\n  File \"/usr/local/lib/python3.10/site-packages/opentrons/protocol_runner/python_protocol_wrappers.py\", line N, in read\n    return parse(\n\n  File \"/usr/local/lib/python3.10/site-packages/opentrons/protocols/parse.py\", line N, in parse\n    return _parse_json(protocol_file, filename)\n\n  File \"/usr/local/lib/python3.10/site-packages/opentrons/protocols/parse.py\", line N, in _parse_json\n    version, validated = validate_json(protocol_json)\n\n  File \"/usr/local/lib/python3.10/site-packages/opentrons/protocols/parse.py\", line N, in validate_json\n    jsonschema.validate(protocol_json, protocol_schema, resolver=resolver)\n\n  File \"/usr/local/lib/python3.10/site-packages/jsonschema/validators.py\", line N, in validate\n    error = exceptions.best_match(validator.iter_errors(instance))\n\n  File \"/usr/local/lib/python3.10/site-packages/jsonschema/exceptions.py\", line N, in best_match\n    best = next(errors, None)\n\n  File \"/usr/local/lib/python3.10/site-packages/jsonschema/validators.py\", line N, in iter_errors\n    for error in errors:\n\n  File \"/usr/local/lib/python3.10/site-packages/jsonschema/_keywords.py\", line N, in properties\n    yield from validator.descend(\n\n  File \"/usr/local/lib/python3.10/site-packages/jsonschema/validators.py\", line N, in descend\n    for error in errors:\n\n  File \"/usr/local/lib/python3.10/site-packages/jsonschema/_keywords.py\", line N, in patternProperties\n    yield from validator.descend(\n\n  File \"/usr/local/lib/python3.10/site-packages/jsonschema/validators.py\", line N, in descend\n    for error in errors:\n\n  File \"/usr/local/lib/python3.10/site-packages/jsonschema/_keywords.py\", line N, in properties\n    yield from validator.descend(\n\n  File \"/usr/local/lib/python3.10/site-packages/jsonschema/validators.py\", line N, in descend\n    for error in errors:\n\n  File \"/usr/local/lib/python3.10/site-packages/jsonschema/_keywords.py\", line N, in ref\n    yield from validator._validate_reference(ref=ref, instance=instance)\n\n  File \"/usr/local/lib/python3.10/site-packages/jsonschema/validators.py\", line N, in _validate_reference\n    scope, resolved = resolve(ref)\n\n  File \"/usr/local/lib/python3.10/site-packages/jsonschema/validators.py\", line N, in resolve\n    return url, self._remote_cache(url)\n\n  File \"/usr/local/lib/python3.10/site-packages/jsonschema/validators.py\", line N, in resolve_from_url\n    return self.resolve_fragment(document, fragment)\n\n  File \"/usr/local/lib/python3.10/site-packages/jsonschema/validators.py\", line N, in resolve_fragment\n    raise exceptions._RefResolutionError(\n"
          },
          "errorType": "PythonException",
          "id": "UUID",
          "isDefined": false,
          "wrappedErrors": [
            {
              "createdAt": "TIMESTAMP",
              "detail": "KeyError: 'slot'",
              "errorCode": "4000",
              "errorInfo": {
                "args": "('slot',)",
                "class": "KeyError",
                "traceback": "  File \"/usr/local/lib/python3.10/site-packages/jsonschema/validators.py\", line N, in resolve_fragment\n    document = document[part]\n"
              },
              "errorType": "PythonException",
              "id": "UUID",
              "isDefined": false,
              "wrappedErrors": []
            },
            {
              "createdAt": "TIMESTAMP",
              "detail": "KeyError: 'slot'",
              "errorCode": "4000",
              "errorInfo": {
                "args": "('slot',)",
                "class": "KeyError",
                "traceback": "  File \"/usr/local/lib/python3.10/site-packages/jsonschema/validators.py\", line N, in resolve_fragment\n    document = document[part]\n"
              },
              "errorType": "PythonException",
              "id": "UUID",
              "isDefined": false,
              "wrappedErrors": []
            }
          ]
        }
      ]
    }
  ],
  "files": [
    {
      "name": "OT2_X_v4_P300M_P20S_MM_TC1_TM_e2eTests.json",
      "role": "main"
    }
  ],
  "labware": [],
  "liquids": [],
  "metadata": {
    "author": "NN MM",
    "category": null,
    "created": "TIMESTAMP",
    "description": "Protocol for e2e tests",
    "lastModified": "TIMESTAMP",
    "protocolName": "script_pur_sample_1",
    "subcategory": null,
    "tags": []
  },
  "modules": [],
  "pipettes": [],
  "result": "not-ok",
  "robotType": "OT-2 Standard",
  "runTimeParameters": []
}
