"""Load liquid command request, result, and implementation models."""
from __future__ import annotations
from pydantic import BaseModel, Field
from typing import TYPE_CHECKING, Optional, Type
from typing_extensions import Literal

from opentrons.protocols.models import LabwareDefinition

from ..types import LabwareLocation
from .command import AbstractCommandImpl, BaseCommand, BaseCommandCreate

if TYPE_CHECKING:
    from ..execution import EquipmentHandler


LoadLiquidCommandType = Literal["loadLiquid"]

class VolumeByWell(BaseModel):
    wellId: int = Field(
        ...,
        description="Well id to capture liquid.",
    )
    volume: int = Field(
        ...,
        description="Volume within associated well.",
    )


class LoadLiquidParams(BaseModel):
    """Payload required to load a liquid into a well."""

    liquidId: str = Field(
        ...,
        description="Unique identifier generated by the app of instance of liquid to load.",
    )
    labwareId: str = Field(
        ...,
        description="Unique identifier of labware to load liquid into.",
    )
    volumeByWell: VolumeByWell = Field(
        ...,
        description="Unique identifier of labware to load liquid into.",
    )


class LoadLiquidResult(BaseModel):
    """Result data from the execution of a LoadLiquid command."""

    labwareId: str = Field(
        ...,
        description="An ID to reference this labware in subsequent commands.",
    )
    liquidId: str = Field(
        ...,
        description="An ID to reference this liquid in subsequent commands.",
    )



class LoadLiquidImplementation(
    AbstractCommandImpl[LoadLiquidParams, LoadLiquidResult]
):
    """Load liquid command implementation."""

    def __init__(self, **kwargs: object) -> None:

    async def execute(self, params: LoadLiquidParams) -> LoadLiquidResult:
        """Load definition and calibration data necessary for a liquid."""

        return LoadLiquidResult(
            labwareId=params.labware_id,
            liquidId=params.liquidId
        )

#
# class LoadLabware(BaseCommand[LoadLabwareParams, LoadLabwareResult]):
#     """Load labware command resource model."""
#
#     commandType: LoadLabwareCommandType = "loadLabware"
#     params: LoadLabwareParams
#     result: Optional[LoadLabwareResult]
#
#     _ImplementationCls: Type[LoadLabwareImplementation] = LoadLabwareImplementation
#
#
# class LoadLabwareCreate(BaseCommandCreate[LoadLabwareParams]):
#     """Load labware command creation request."""
#
#     commandType: LoadLabwareCommandType = "loadLabware"
#     params: LoadLabwareParams
#
#     _CommandCls: Type[LoadLabware] = LoadLabware
