"""Load liquid command request, result, and implementation models."""
from pydantic import BaseModel, Field
from typing import Optional, Type
from typing_extensions import Literal

from .command import AbstractCommandImpl, BaseCommand, BaseCommandCreate


LoadLiquidCommandType = Literal["loadLiquid"]


class VolumeByWell(BaseModel):
    """Representation of well and volume associated."""

    wellId: int = Field(
        ...,
        description="Well id to capture liquid.",
    )
    volume: int = Field(
        ...,
        description="Volume within associated well.",
    )


class LoadLiquidParams(BaseModel):
    """Payload required to load a liquid into a well."""

    liquidId: str = Field(
        ...,
        description="Unique identifier generated by the app of instance of liquid to load.",
    )
    labwareId: str = Field(
        ...,
        description="Unique identifier of labware to load liquid into.",
    )
    volumeByWell: VolumeByWell = Field(
        ...,
        description="Well and associated liquid volume.",
    )


class LoadLiquidResult(BaseModel):
    """Result data from the execution of a LoadLiquid command."""

    labwareId: str = Field(
        ...,
        description="An ID to reference this labware in subsequent commands.",
    )
    liquidId: str = Field(
        ...,
        description="An ID to reference this liquid in subsequent commands.",
    )


class LoadLiquidImplementation(AbstractCommandImpl[LoadLiquidParams, LoadLiquidResult]):
    """Load liquid command implementation."""

    async def execute(self, params: LoadLiquidParams) -> LoadLiquidResult:
        """Load definition and calibration data necessary for a liquid."""
        return LoadLiquidResult(labwareId=params.labwareId, liquidId=params.liquidId)


class LoadLiquid(BaseCommand[LoadLiquidParams, LoadLiquidResult]):
    """Load liquid command resource model."""

    commandType: LoadLiquidCommandType = "loadLiquid"
    params: LoadLiquidParams
    result: Optional[LoadLiquidResult]

    _ImplementationCls: Type[LoadLiquidImplementation] = LoadLiquidImplementation


class LoadLabwareCreate(BaseCommandCreate[LoadLiquidParams]):
    """Load liquid command creation request."""

    commandType: LoadLiquidCommandType = "loadLiquid"
    params: LoadLiquidParams

    _CommandCls: Type[LoadLiquid] = LoadLiquid
