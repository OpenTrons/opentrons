from __future__ import annotations

import json
import re
import os
from opentrons.hardware_control.emulation.parser import Parser
from .g_code import GCode
from typing import List


class GCodeProgram:
    """
    Class for parsing various G-Code files and programs into a
    list of GCode objects
    """

    @classmethod
    def from_log_file(cls, log_file_path: str) -> GCodeProgram:
        """
        Function to convert a log file generated by emulator
        to a GCodeProgram object
        :param log_file_path: Absolute path to log file

        :return: GCodeProgram object
        """
        with open(log_file_path, 'r') as file:
            write_matches = []
            for line in file.readlines():
                split_line = line.split('|')
                if len(split_line) == 3:
                    date, device, g_code = split_line

                    write_matches.extend(
                        [
                            GCode(
                                float(date),
                                device.strip(),
                                g_code.gcode,
                                g_code.params
                            )
                            for g_code
                            in Parser().parse(g_code)
                        ]
                    )
        return cls(write_matches)

    def __init__(self, g_codes: List[GCode]) -> None:
        self._g_codes = g_codes

    @property
    def g_codes(self) -> List[GCode]:
        """List of GCode objects"""
        return self._g_codes

    def get_json(self) -> str:
        return json.dumps(
            [
                code.get_explanation_dict()
                for code in self._g_codes
            ],
            indent=4
        )

    def save_json_to_file(self, file_name: str) -> None:
        file_path = os.path.join(os.getcwd(), file_name)
        with open(file_path, 'w+') as file:
            file.write(self.get_json())
