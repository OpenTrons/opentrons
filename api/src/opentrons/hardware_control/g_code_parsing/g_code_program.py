from __future__ import annotations
import re
from opentrons.hardware_control.emulation.parser import Parser
from .g_code import GCode


class GCodeProgram:
    """
    Class for parsing various G-Code files and programs into a
    list of GCode objects
    """
    WRITE_REGEX = re.compile(r"(.*?) \| (.*?) \|(.*?)$")

    @classmethod
    def from_log_file(cls, log_file_path: str) -> GCodeProgram:
        """
        Function to convert a log file generated by emulator
        to a GCodeProgram object
        :param log_file_path: Absolute path to log file

        :return: GCodeProgram object
        """
        with open(log_file_path, 'r') as file:
            write_matches = []
            for line in file.readlines():
                match = cls.WRITE_REGEX.search(line)
                if match is not None:
                    date, device, g_code = match.groups()

                    write_matches.extend(
                        [
                            GCode(
                                float(date),
                                device.strip(),
                                g_code.strip(),
                                g_code_args
                            )
                            for g_code, _, g_code_args
                            in Parser().parse_to_string_list(g_code)
                        ]
                    )
        return cls(write_matches)

    def __init__(self, g_codes: GCode):
        self._g_codes = g_codes

    @property
    def g_codes(self):
        """List of GCode objects"""
        return self._g_codes
