{
  "$id": "opentronsProtocolSchemaV6",
  "$schema": "http://json-schema.org/draft-07/schema#",

  "definitions": {
    "pipetteName": {
      "description": "Name of a pipette. Does not contain info about specific model/version. Should match keys in pipetteNameSpecs.json file",
      "type": "string",
      "enum": [
        "p10_single",
        "p10_multi",
        "p20_single_gen2",
        "p20_multi_gen2",
        "p50_single",
        "p50_multi",
        "p300_single",
        "p300_multi",
        "p300_single_gen2",
        "p300_multi_gen2",
        "p1000_single",
        "p1000_single_gen2"
      ]
    },

    "moduleOnlyParams": {
      "required": ["module"],
      "additionalProperties": false,
      "properties": {
        "module": {
          "type": "string"
        }
      }
    },

    "mmOffset": {
      "description": "Millimeters for pipette location offsets",
      "type": "number"
    },

    "offsetFromBottomMm": {
      "description": "Offset from bottom of well in millimeters",
      "required": ["offsetFromBottomMm"],
      "properties": {
        "offsetFromBottomMm": { "$ref": "#/definitions/mmOffset" }
      }
    },

    "offset": {
      "description": "x, y, and z component of offset vector in mm",
      "required": ["x", "y", "z"],
      "properties": {
        "x": { "type": "number" },
        "y": { "type": "number" },
        "z": { "type": "number" }
      }
    },

    "pipetteAccessParams": {
      "required": ["pipette", "labware", "well"],
      "properties": {
        "pipette": {
          "type": "string"
        },
        "labware": {
          "type": "string"
        },
        "well": {
          "type": "string"
        }
      }
    },

    "volumeParams": {
      "required": ["volume"],
      "volume": {
        "type": "number"
      }
    },

    "flowRate": {
      "required": ["flowRate"],
      "properties": {
        "flowRate": {
          "description": "Flow rate in uL/sec. Must be greater than 0",
          "type": "number",
          "minimum": 0
        }
      }
    }
  },

  "type": "object",
  "additionalProperties": false,
  "required": [
    "$otSharedSchema",
    "schemaVersion",
    "metadata",
    "robot",
    "pipettes",
    "labware",
    "labwareDefinitions",
    "commands"
  ],
  "properties": {
    "$otSharedSchema": {
      "description": "The path to a valid Opentrons shared schema relative to the shared-data directory, without its extension.",
      "enum": ["#/protocol/schemas/6"]
    },

    "schemaVersion": {
      "description": "Schema version of a protocol is a single integer",
      "enum": [6]
    },

    "metadata": {
      "description": "Optional metadata about the protocol",
      "type": "object",

      "properties": {
        "protocolName": {
          "description": "A short, human-readable name for the protocol",
          "type": "string"
        },
        "author": {
          "description": "The author or organization who created the protocol",
          "type": "string"
        },
        "description": {
          "description": "A text description of the protocol.",
          "type": ["string", "null"]
        },

        "created": {
          "description": "UNIX timestamp when this file was created",
          "type": "number"
        },
        "lastModified": {
          "description": "UNIX timestamp when this file was last modified",
          "type": ["number", "null"]
        },

        "category": {
          "description": "Category of protocol (eg, \"Basic Pipetting\")",
          "type": ["string", "null"]
        },
        "subcategory": {
          "description": "Subcategory of protocol (eg, \"Cell Plating\")",
          "type": ["string", "null"]
        },
        "tags": {
          "description": "Tags to be used in searching for this protocol",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },

    "designerApplication": {
      "description": "Optional data & metadata not required to execute the protocol, used by the application that created this protocol",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the application that created the protocol. Should be namespaced under the organization or individual who owns the organization, eg \"opentrons/protocol-designer\"",
          "type": "string"
        },
        "version": {
          "description": "Version of the application that created the protocol",
          "type": "string"
        },
        "data": {
          "description": "Any data used by the application that created this protocol",
          "type": "object"
        }
      }
    },

    "robot": {
      "required": ["model", "deckId"],
      "properties": {
        "model": {
          "description": "Model of the robot this protocol is written for",
          "type": "string",
          "enum": ["OT-2 Standard", "OT-3 Standard"]
        },
        "deckId": {
          "description": "Identifier of physical deck this protocol is written for. This should match a top-level key in shared-data/deck/definitions/2.json",
          "type": "string"
        }
      }
    },

    "pipettes": {
      "description": "The pipettes used in this protocol, keyed by an arbitrary unique ID",
      "additionalProperties": false,
      "patternProperties": {
        ".+": {
          "description": "Fields describing an individual pipette",
          "type": "object",
          "required": ["name"],
          "additionalProperties": false,
          "properties": {
            "name": {
              "$ref": "#/definitions/pipetteName"
            }
          }
        }
      }
    },

    "labwareDefinitions": {
      "description": "All labware definitions used by labware in this protocol, keyed by UUID",
      "patternProperties": {
        ".+": {
          "$ref": "opentronsLabwareSchemaV2"
        }
      }
    },

    "labware": {
      "description": "All instances of labware used in this protocol, and references to their definitions",
      "patternProperties": {
        ".+": {
          "description": "Fields describing a single labware",
          "type": "object",
          "required": ["definitionId"],
          "additionalProperties": false,
          "properties": {
            "definitionId": {
              "description": "reference to this labware's ID in \"labwareDefinitions\"",
              "type": "string"
            },
            "displayName": {
              "description": "An optional human-readable nickname for this labware instance within this protocol. Eg \"Buffer Trough\"",
              "type": "string"
            }
          }
        }
      }
    },

    "liquid": {
      "description": "All instances of liquid used in this protocol",
      "patternProperties": {
        ".+": {
          "description": "Fields describing a single liquid, keyed by a unique identifier",
          "type": "object",
          "required": ["displayName", "description"],
          "properties": {
            "displayName": {
              "description": "An human-readable name for this liquid.",
              "type": "string"
            },
            "description": {
              "description": "A description of this liquid.",
              "type": "string"
            }
          }
        }
      }
    },

    "modules": {
      "description": "All modules used in this protocol",
      "patternProperties": {
        ".+": {
          "description": "Fields describing a single module on the deck",
          "type": "object",
          "required": ["model"],
          "additionalProperties": false,
          "properties": {
            "model": {
              "description": "model of module. Eg 'magneticModuleV1' or 'magneticModuleV2'. This should match a top-level key in shared-data/module/definitions/2.json",
              "type": "string"
            }
          }
        }
      }
    },

    "commands": {
      "description": "An array of command objects representing steps to be executed on the robot",
      "type": "array",
      "items": {
        "anyOf": [
          {
            "description": "Aspirate Liquid / Dispense Liquid / Aspirate Air Gap / Dispense Air Aap",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "properties": {
              "id": {"type": "string"},
              "commandType": {
                "enum": ["aspirate", "dispense", "aspirateAirGap", "dispenseAirGap"]
              },
              "params": {
                "allOf": [
                  { "$ref": "#/definitions/flowRate" },
                  { "$ref": "#/definitions/pipetteAccessParams" },
                  { "$ref": "#/definitions/volumeParams" },
                  {
                    "offset": {
                      "$ref": "#/definitions/offset",
                      "description": "Offset from bottom center of location, in mm"
                    }
                  }
                ]
              }
            }
          },

          {
            "description": "Blowout",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "properties": {
              "id": {"type": "string"},
              "commandType": {
                "enum": ["blowout"]
              },
              "params": {
                "allOf": [
                  { "$ref": "#/definitions/flowRate" },
                  { "$ref": "#/definitions/pipetteAccessParams" },
                  {
                    "offset": {
                      "$ref": "#/definitions/offset",
                      "description": "Offset from bottom center of location, in mm"
                    }
                  }
                ]
              }
            }
          },

          {
            "description": "Touch Tip",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "properties": {
              "id": {"type": "string"},
              "commandType": {
                "enum": ["touchTip"]
              },
              "params": {
                "allOf": [
                  { "$ref": "#/definitions/pipetteAccessParams" },
                  {
                    "offset": {
                      "$ref": "#/definitions/offset",
                      "description": "Offset from bottom center of location, in mm"
                    }
                  }
                ]
              }
            }
          },

          {
            "description": "Pick Up Tip / Drop Tip",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": {
                "enum": ["pickUpTip", "dropTip"]
              },
              "params": {
                "allOf": [{ "$ref": "#/definitions/pipetteAccessParams" }]
              }
            }
          },

          {
            "description": "Move To Slot. NOTE: this is an EXPERIMENTAL command, its behavior is subject to change in future releases.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["moveToSlot"] },
              "params": {
                "type": "object",
                "required": ["pipette", "slot"],
                "additionalProperties": false,
                "properties": {
                  "pipette": { "type": "string" },
                  "slot": { "type": "string" },
                  "offset": {
                    "$ref": "#/definitions/offset",
                    "description": "Optional offset from slot bottom left corner, in mm"
                  },
                  "minimumZHeight": {
                    "description": "Optional minimal Z margin in mm. If this is larger than the API's default safe Z margin, it will make the arc higher. If it's smaller, it will have no effect. Specifying this for movements that would not arc (moving within the same well in the same labware) will cause an arc movement instead.",
                    "type": "number",
                    "minimum": 0
                  },
                  "forceDirect": {
                    "description": "Default is false. If true, moving from one labware/well to another will not arc to the default safe z, but instead will move directly to the specified location. This will also force the 'minimumZHeight' param to be ignored. A 'direct' movement is in X/Y/Z simultaneously",
                    "type": "boolean"
                  }
                }
              }
            }
          },

          {
            "description": "Delay Protocol Execution",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": {
                "enum": ["delay"]
              },
              "params": {
                "type": "object",
                "additionalProperties": false,
                "required": ["wait"],
                "properties": {
                  "wait": {
                    "description": "either a number of seconds to wait (fractional values OK), or `true` to wait indefinitely until the user manually resumes the protocol",
                    "anyOf": [{ "type": "number" }, { "enum": [true] }]
                  },
                  "message": {
                    "description": "optional message describing the delay"
                  }
                }
              }
            }
          },

          {
            "description": "Magnetic Module Engage: Engage magnet to specified height.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": {
                "enum": ["magneticModule/engageMagnet"]
              },
              "params": {
                "required": ["module", "engageHeight"],
                "additionalProperties": false,
                "properties": {
                  "engageHeight": {
                    "description": "Height in mm(*) from bottom plane of labware (above if positive, below if negative). *NOTE: for magneticModuleV1 (aka GEN1), these are not true mm but an arbitrary unit equal to 0.5mm. So `engageHeight: 2` means 1mm above the labware plane if the command is for a GEN1 magnetic module, but would mean 2mm above the labware plane for GEN2 module",
                    "type": "number"
                  },
                  "module": {
                    "type": "string"
                  }
                }
              }
            }
          },

          {
            "description": "Magnetic Module Disengage: Retract magnet to disengaged (home) position",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": {
                "enum": ["magneticModule/disengageMagnet"]
              },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Temperature Module Set Target Temperature: Module will begin moving to the target temperature. This command is non-blocking, it does not delay protocol execution while approaching the target temperature.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["temperatureModule/setTargetTemperature"] },
              "params": {
                "required": ["module", "temperature"],
                "additionalProperties": false,
                "properties": {
                  "module": { "type": "string" },
                  "temperature": { "type": "number" }
                }
              }
            }
          },

          {
            "description": "Temperature Module Await Temperature: Delay protocol execution until the specified temperature is reached.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["temperatureModule/awaitTemperature"] },
              "params": {
                "required": ["module", "temperature"],
                "additionalProperties": false,
                "properties": {
                  "module": { "type": "string" },
                  "temperature": { "type": "number" }
                }
              }
            }
          },

          {
            "description": "Temperature Module Deactivate: Module will stop actively controlling its temperature and drift to ambient temperature.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["temperatureModule/deactivate"] },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Thermocycler Set Target Block Temperature: Well block will begin moving to the target temperature. This command is non-blocking, it does not delay protocol execution while approaching the target temperature.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["thermocycler/setTargetBlockTemperature"] },
              "params": {
                "required": ["module", "temperature"],
                "additionalProperties": false,
                "properties": {
                  "module": { "type": "string" },
                  "temperature": { "type": "number" },
                  "volume": {
                    "type": "number"
                  }
                }
              }
            }
          },

          {
            "description": "Thermocycler Set Target Lid Temperature: Lid will begin moving to the target temperature. This command is non-blocking, it does not delay protocol execution while approaching the target temperature.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["thermocycler/setTargetLidTemperature"] },
              "params": {
                "required": ["module", "temperature"],
                "additionalProperties": false,
                "properties": {
                  "module": { "type": "string" },
                  "temperature": { "type": "number" }
                }
              }
            }
          },

          {
            "description": "Thermocycler Await Block Temperature: Delay protocol execution until the specified well block target temperature is reached.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["thermocycler/awaitBlockTemperature"] },
              "params": {
                "required": ["module", "temperature"],
                "additionalProperties": false,
                "properties": {
                  "module": { "type": "string" },
                  "temperature": { "type": "number" }
                }
              }
            }
          },

          {
            "description": "Thermocycler Await Lid Temperature: Delay protocol execution until the specified lid target temperature is reached.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["thermocycler/awaitLidTemperature"] },
              "params": {
                "required": ["module", "temperature"],
                "additionalProperties": false,
                "properties": {
                  "module": { "type": "string" },
                  "temperature": { "type": "number" }
                }
              }
            }
          },

          {
            "description": "Thermocycler Deactivate Block: Module will stop actively controlling its well block temperature.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["thermocycler/deactivateBlock"] },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Thermocycler Deactivate Lid: Module will stop actively controlling its lid temperature.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["thermocycler/deactivateLid"] },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Thermocycler Open Lid: Open lid of the module. This command will delay protocol execution until the lid is fully open.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["thermocycler/openLid"] },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Thermocycler Close Lid: Close the lid of the module. This command will delay protocol execution until the lid is fully closed.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["thermocycler/closeLid"] },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Thermocycler Run Profile: Begin running the specified profile steps on the Thermocycler. This command is non-blocking, it does not delay protocol execution outside of thermocycler steps. No more thermocycler commands should be given until a 'thermocycler/awaitProfileComplete' command is executed.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["thermocycler/runProfile"] },
              "params": {
                "type": "object",
                "required": ["module", "profile", "volume"],
                "additionalProperties": false,
                "properties": {
                  "module": { "type": "string" },
                  "profile": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": ["temperature", "holdTime"],
                      "additionalProperties": false,
                      "properties": {
                        "temperature": {
                          "description": "Target temperature of profile step",
                          "type": "number"
                        },
                        "holdTime": {
                          "description": "Time (in seconds) to hold once temperature is reached",
                          "type": "number"
                        }
                      }
                    }
                  },
                  "volume": {
                    "type": "number"
                  }
                }
              }
            }
          },

          {
            "description": "Thermocycler Await Profile Complete: Delay protocol execution until profile execution is complete.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["thermocycler/awaitProfileComplete"] },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Heater Shaker Module Set Target Temperature: Module will begin moving to the target temperature. This command is non-blocking, it does not delay protocol execution while approaching the target temperature.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["heaterShakerModule/setTargetTemperature"] },
              "params": {
                "required": ["module", "temperature"],
                "additionalProperties": false,
                "properties": {
                  "module": { "type": "string" },
                  "temperature": { "type": "number", "description": "target temperature to heat to in °C" }
                }
              }
            }
          },

          {
            "description": "Heater Shaker Module Set Target Shake Speed: Module will begin accelerating to the target shake speed. This command is non-blocking, it does not delay protocol execution while approaching the target shake speed.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["heaterShakerModule/setTargetShakeSpeed"] },
              "params": {
                "required": ["module", "rpm"],
                "additionalProperties": false,
                "properties": {
                  "module": { "type": "string" },
                  "rpm": { "type": "number", "description": "target orbital rotations per minute" }
                }
              }
            }
          },

          {
            "description": "Heater Shaker Module Await Temperature: Delay protocol execution until the specified target temperature is reached.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["heaterShakerModule/awaitTemperature"] },
              "params": {
                "required": ["module", "temperature"],
                "additionalProperties": false,
                "properties": {
                  "module": { "type": "string" },
                  "temperature": { "type": "number", "description": "temperature in °C to await" }
                }
              }
            }
          },

          {
            "description": "Heater Shaker Module Await Speed: Delay protocol execution until the specified target shake speed is reached.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["heaterShakerModule/awaitShakeSpeed"] },
              "params": {
                "required": ["module", "rpm"],
                "additionalProperties": false,
                "properties": {
                  "module": { "type": "string" },
                  "rpm": { "type": "number", "description": "target rotations per minute to await" }
                }
              }
            }
          },

          {
            "description": "Heater Shaker Module Deactivate Heater: Module will stop actively heating and drift to ambient temperature.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["heaterShakerModule/deactivateHeater"] },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Heater Shaker Module Deactivate Shaker: Module will deaccelerate until holding still",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["heaterShakerModule/deactivateShaker"] },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Heater Shaker Module Deactivate Shaker: Module will deaccelerate until holding still",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["heaterShakerModule/deactivateShaker"] },
              "params": {
                "$ref": "#/definitions/moduleOnlyParams"
              }
            }
          },

          {
            "description": "Move To Well: Move the pipette's critical point to the specified well in a labware, with an optional offset. The pipette's critical point is a reference point on the pipette. The critical point can be one of the following: (1) Single-channel pipette with no tip: end of nozzle. (2) Multi-channel pipette with no tip: end of backmost nozzle. (3) Single-channel pipette with a tip: end of tip. (4) Multi-channel pipette with tip: end of tip on backmost nozzle.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "properties": {
              "id": {"type": "string"},
              "commandType": { "enum": ["moveToWell"] },
              "params": {
                "type": "object",
                "required": ["pipette", "labware", "well"],
                "additionalProperties": false,
                "properties": {
                  "pipette": { "type": "string" },
                  "labware": { "type": "string" },
                  "well": { "type": "string" },
                  "offset": {
                    "$ref": "#/definitions/offset",
                    "description": "Optional offset from well bottom center, in mm"
                  },
                  "minimumZHeight": {
                    "description": "Optional minimal Z margin in mm. If this is larger than the API's default safe Z margin, it will make the arc higher. If it's smaller, it will have no effect. Specifying this for movements that would not arc (moving within the same well in the same labware) will cause an arc movement instead.",
                    "type": "number",
                    "minimum": 0
                  },
                  "forceDirect": {
                    "description": "Default is false. If true, moving from one labware/well to another will not arc to the default safe z, but instead will move directly to the specified location. This will also force the 'minimumZHeight' param to be ignored. A 'direct' movement is in X/Y/Z simultaneously",
                    "type": "boolean"
                  }
                }
              }
            }
          },

          {
            "description": "Load Pipette: This command is only meant to make the Opentrons system aware of a pipette's location. It does not instruct any specific hardware to carry out the physical action of moving the pipette to the location.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": {
                "enum": ["loadPipette"]
              },
              "params": {
                "required": ["pipette", "mount"],
                "properties": {
                  "pipette": {
                    "type": "string",
                    "description": "Unique identifier of pipette to load"
                  },
                  "mount": {
                    "type": ["string", "null"],
                    "description": "Unique identifier of physical destination location to load pipette into (e.g. 'left' || null)"
                  }
                }
              }
            }
          },

          {
            "description": "Load Labware: This command is only meant to make the Opentrons system aware of a labware instance's location. It does not instruct any specific hardware to carry out the physical action of moving the labware instance to the location.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": {
                "enum": ["loadLabware"]
              },
              "params": {
                "required": ["labware", "location"],
                "properties": {
                  "labware": {
                    "type": "string",
                    "description": "Unique identifier of labware to load"
                  },
                  "location": {
                    "type": ["string", "null"],
                    "description": "Unique identifier of physical destination location to load labware into (e.g. '1' || null)"
                  }
                }
              }
            }
          },

          {
            "description": "Load Module: This command is only meant to make the Opentrons system aware of a module instance's location. It does not instruct any specific hardware to carry out the physical action of moving the module instance to the location.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": {
                "enum": ["loadModule"]
              },
              "params": {
                "required": ["module", "location"],
                "properties": {
                  "module": {
                    "type": "string",
                    "description": "Unique identifier of module to load"
                  },
                  "location": {
                    "type": ["string", "null"],
                    "description": "Unique identifier of physical destination location to load module into (e.g. '1' || null)"
                  }
                }
              }
            }
          },

          {
            "description": "Load Liquid: Note this command is only meant to make the Opentrons system aware of a liquid's location. It does not instruct any specific hardware to carry out the physical action of moving the liquid to the location.",
            "type": "object",
            "required": ["id", "commandType", "params"],
            "additionalProperties": false,
            "properties": {
              "id": {"type": "string"},
              "commandType": {
                "enum": ["loadLiquid"]
              },
              "params": {
                "required": ["liquidId", "labwareId", "volumeByWell"],
                "properties": {
                  "liquidId": {
                    "type": "string",
                    "description": "Unique identifier of instance of entity to load (e.g. pipette id, module id, labware id)"
                  },
                  "labwareId": {
                    "type": "string",
                    "description": "Unique identifier of physical destination location to load liquid into (e.g. pipette mount, slot id, module id)"
                  },
                  "volumeByWell": {
                    "type": "object",
                    "patternProperties": {
                      ".+": {
                        "description": "Volume in µL keyed by well from the specified labware",
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },

    "commandAnnotations": {
      "description": "An optional object of annotations associated with commands. Its usage has not yet been defined, so its shape is not enforced by this schema.",
      "type": "object"
    }
  }
}
