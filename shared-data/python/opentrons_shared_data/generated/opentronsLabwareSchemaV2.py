# generated by datamodel-codegen:
#   filename:  opentronsLabwareSchemaV2
#   timestamp: 2021-03-25T19:54:58+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field
from typing_extensions import Literal


class OrderingItem(BaseModel):
    __root__: List[Any] = Field(..., min_items=1)


class CornerOffsetFromSlot(BaseModel):
    """
    Distance from left-front-bottom corner of slot to left-front-bottom corner of labware bounding box. Used for labware that spans multiple slots. For labware that does not span multiple slots, x/y/z should all be zero.
    """

    x: float
    y: float
    z: float


class PositiveNumber(BaseModel):
    __root__: float = Field(..., ge=0.0)


class BrandData(BaseModel):
    brand: str = Field(..., description='Brand/manufacturer name')
    brandId: Optional[List[str]] = Field(
        None,
        description='An array of manufacture numbers pertaining to a given labware',
    )
    links: Optional[List[str]] = Field(
        None, description='URLs for manufacturer page(s)'
    )


class DisplayCategory(Enum):
    tipRack = 'tipRack'
    tubeRack = 'tubeRack'
    reservoir = 'reservoir'
    trash = 'trash'
    wellPlate = 'wellPlate'
    aluminumBlock = 'aluminumBlock'
    other = 'other'


class SafeString(BaseModel):
    __root__: str = Field(
        ...,
        description='a string safe to use for loadName / namespace. Lowercase-only.',
        regex='^[a-z0-9._]+$',
    )


class Metadata(BaseModel):
    """
    Properties used for search and display
    """

    displayName: str = Field(..., description='Easy to remember name of labware')
    displayCategory: DisplayCategory = Field(
        ..., description='Label(s) used in UI to categorize labware'
    )
    displayVolumeUnits: Literal['ÂµL', 'mL', 'L'] = Field(
        ..., description='Volume units for display'
    )
    tags: Optional[List[str]] = Field(
        None, description='List of descriptions for a given labware'
    )


class Parameters(BaseModel):
    """
    Internal describers used to determine pipette movement to labware
    """

    format: Literal[
        '96Standard', '384Standard', 'trough', 'irregular', 'trash'
    ] = Field(
        ..., description='Property to determine compatibility with multichannel pipette'
    )
    quirks: Optional[List[str]] = Field(
        None,
        description='Property to classify a specific behavior this labware should have',
    )
    isTiprack: bool = Field(
        ..., description='Flag marking whether a labware is a tiprack or not'
    )
    tipLength: Optional[PositiveNumber] = Field(
        None,
        description='Required if labware is tiprack, specifies length of tip from drawing or as measured with calipers',
    )
    tipOverlap: Optional[PositiveNumber] = Field(
        None,
        description='Required if labware is tiprack, specifies the length of the area of the tip that overlaps the nozzle of the pipette',
    )
    loadName: SafeString = Field(
        ..., description='Name used to reference a labware definition'
    )
    isMagneticModuleCompatible: bool = Field(
        ...,
        description='Flag marking whether a labware is compatible by default with the Magnetic Module',
    )
    magneticModuleEngageHeight: Optional[PositiveNumber] = Field(
        None, description='Distance to move magnetic module magnets to engage'
    )


class Dimensions(BaseModel):
    """
    Outer dimensions of a labware
    """

    yDimension: PositiveNumber
    zDimension: PositiveNumber
    xDimension: PositiveNumber


class Metadata1(BaseModel):
    """
    Metadata specific to a grid of wells in a labware
    """

    displayName: Optional[str] = Field(
        None, description='User-readable name for the well group'
    )
    displayCategory: Optional[DisplayCategory] = Field(
        None, description='Label(s) used in UI to categorize well groups'
    )
    wellBottomShape: Optional[Literal['flat', 'u', 'v']] = Field(
        None, description='Bottom shape of the well for UI purposes'
    )


class Group(BaseModel):
    wells: List[str] = Field(
        ..., description='An array of wells that contain the same metadata', min_items=1
    )
    metadata: Metadata1 = Field(
        ..., description='Metadata specific to a grid of wells in a labware'
    )
    brand: Optional[BrandData] = Field(
        None, description='Brand data for the well group (e.g. for tubes)'
    )


class Model(BaseModel):
    schemaVersion: Literal['2'] = Field(
        ..., description='Which schema version a labware is using'
    )
    version: int = Field(
        ...,
        description='Version of the labware definition itself (eg myPlate v1/v2/v3). An incrementing integer',
        ge=1.0,
    )
    namespace: SafeString
    metadata: Metadata = Field(
        ..., description='Properties used for search and display'
    )
    brand: BrandData = Field(
        ...,
        description='Real-world labware that the definition is modeled from and/or compatible with',
    )
    parameters: Parameters = Field(
        ...,
        description='Internal describers used to determine pipette movement to labware',
    )
    ordering: List[OrderingItem] = Field(
        ...,
        description='Generated array that keeps track of how wells should be ordered in a labware',
    )
    cornerOffsetFromSlot: CornerOffsetFromSlot = Field(
        ...,
        description='Distance from left-front-bottom corner of slot to left-front-bottom corner of labware bounding box. Used for labware that spans multiple slots. For labware that does not span multiple slots, x/y/z should all be zero.',
    )
    dimensions: Dimensions = Field(..., description='Outer dimensions of a labware')
    wells: Dict[str, Any] = Field(
        ...,
        description='Unordered object of well objects with position and dimensional information',
    )
    groups: List[Group] = Field(
        ...,
        description='Logical well groupings for metadata/display purposes; changes in groups do not affect protocol execution',
    )
