"""
This was initially generated by datamodel-codegen from the v4 Deck Definitions schema in
shared-data. It's been modified for compliancy.
"""

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Extra, Field, PositiveFloat


class SchemaVersion(Enum):
    int_4 = 4


class Metadata(BaseModel):
    displayName: Optional[str] = Field(
        None, description="A short, human-readable name for the deck"
    )
    tags: Optional[List[str]] = Field(
        None, description="Tags to be used in searching for this deck"
    )


class Model(Enum):
    OT_2_Standard = "OT-2 Standard"
    OT_3_Standard = "OT-3 Standard"


class Robot(BaseModel):
    model: Model = Field(..., description="Model of the robot")


class AreaType(Enum):
    slot = "slot"
    movableTrash = "movableTrash"
    fixedTrash = "fixedTrash"
    wasteChute = "wasteChute"


class CutoutFixture(BaseModel):
    id: str = Field(..., description="Unique identifier for the cutout fixture.")
    mayMountTo: List[str] = Field(
        ...,
        description="A list of compatible cutouts this fixture may be mounted to. These must match `id`s in `cutouts`.",
    )
    displayName: str = Field(
        ...,
        description='A human-readable nickname for this area e.g. "Standard Right Slot" or "Slot With Movable Trash"',
    )
    providesAddressableAreas: Dict[str, List[str]] = Field(
        ..., description="A mapping of mayMountTo locations to addressableArea ids."
    )


class PositiveNumber(BaseModel):
    __root__: PositiveFloat


class XyzArray(BaseModel):
    __root__: List[float] = Field(
        ..., description="Array of 3 numbers, [x, y, z]", max_items=3, min_items=3
    )


class Coordinates(BaseModel):
    class Config:
        extra = Extra.forbid

    x: float
    y: float
    z: float


class UnitVectorEnum(Enum):
    number_1 = 1
    number__1 = -1


class UnitVector(BaseModel):
    __root__: List[UnitVectorEnum] = Field(
        ...,
        description="Array of 3 unit directions, [x, y, z]",
        max_items=3,
        min_items=3,
    )


class BoundingBox(BaseModel):
    xDimension: PositiveNumber
    yDimension: PositiveNumber
    zDimension: PositiveNumber


class AddressableArea(BaseModel):
    id: str = Field(..., description="Unique identifier for slot")
    areaType: AreaType = Field(
        ..., description="The type of deck item, defining allowed behavior."
    )
    offsetFromCutoutFixture: XyzArray = Field(
        ...,
        description="Relative offset of the addressable area as it sits on the cutout slot.",
    )
    matingSurfaceUnitVector: Optional[UnitVector] = Field(
        None,
        description="An optional diagonal direction of force, defined by spring location, which governs the mating surface of objects placed in slot.",
    )
    boundingBox: BoundingBox
    displayName: str = Field(
        ...,
        description='A human-readable nickname for this area e.g. "Slot A1" or "Movable Trash"',
    )
    compatibleModuleTypes: Optional[List[str]] = Field(
        None,
        description="An array of module types that can be placed in this area. The module type names can be found in the moduleType field of a module definition.",
    )
    ableToDropTips: Optional[bool] = Field(
        None, description="Whether tips are allowed to be dropped into this area."
    )
    ableToDropLabware: Optional[bool] = Field(
        None,
        description="Whether labware is allowed to be dropped (different then being placed) into this area.",
    )
    dropTipsOffset: Optional[XyzArray] = Field(
        None,
        description="Relative positional offset of where the pipette should drop tips from.",
    )
    dropLabwareOffset: Optional[XyzArray] = Field(
        None,
        description="Relative positional offset of where the gripper should drop labware from.",
    )


class CalibrationPoint(BaseModel):
    id: str = Field(..., description="Unique identifier for calibration point")
    position: XyzArray
    displayName: str = Field(
        ...,
        description='An optional human-readable nickname for this point Eg "Slot 3 Cross" or "Slot 1 Dot"',
    )


class Cutout(BaseModel):
    id: str = Field(..., description="Unique identifier for the cutout")
    position: XyzArray = Field(..., description="Absolute position of the cutout")
    displayName: str = Field(
        ...,
        description='An optional human-readable nickname for this cutout e.g. "Cutout A1"',
    )


class Locations(BaseModel):
    addressableAreas: List[AddressableArea] = Field(
        ..., description="Ordered slots available for placing labware"
    )
    calibrationPoints: List[CalibrationPoint] = Field(
        ..., description="Key points for deck calibration"
    )
    cutouts: List[Cutout] = Field(
        ..., description="The machined cutout slots on the deck surface."
    )


class Default(BaseModel):
    pickUpOffset: Coordinates = Field(
        ...,
        description="Offset added to calculate pick-up coordinates of a labware placed on this deck.",
    )
    dropOffset: Coordinates = Field(
        ...,
        description="Offset added to calculate drop coordinates of a labware placed on this deck.",
    )


class GripperOffsets(BaseModel):
    default: Default


class DeckDefinitionV4(BaseModel):
    class Config:
        extra = Extra.forbid

    otId: str = Field(..., description="Unique internal ID generated using UUID")
    schemaVersion: SchemaVersion = Field(
        ..., description="Schema version of a deck is a single integer"
    )
    cornerOffsetFromOrigin: XyzArray = Field(
        ...,
        description="Position of left-front-bottom corner of entire deck to robot coordinate system origin",
    )
    dimensions: XyzArray = Field(
        ..., description="Outer dimensions of a deck bounding box"
    )
    metadata: Metadata = Field(..., description="Optional metadata about the Deck")
    robot: Robot
    locations: Locations
    cutoutFixtures: List[CutoutFixture]
    gripperOffsets: Optional[GripperOffsets] = Field(
        None,
        description="Offsets to be added when calculating the coordinates a gripper should go to when picking up or dropping a labware on this deck.",
    )
