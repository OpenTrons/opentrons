/**
 * Flowtype definitions for modules
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.13.0
 * @flow
 */

import type { ModuleModel, ModuleRealType, ModuleType } from "./types";
declare type Coordinates = {|
  x: number,
  y: number,
  z?: number,
|};
declare type AffineTransform = [number, number, number];
export type ModuleDef2 = {|
  moduleType: ModuleRealType,
  model: ModuleModel,
  labwareOffset: Coordinates,
  dimensions: {
    bareOverallHeight: number,
    overLabwareHeight: number,
    lidHeight?: number,
  },
  calibrationPoint: Coordinates,
  displayName: string,
  quirks: string[],
  slotTransforms: {
    [deckDef: string]: {
      [slot: string]: {
        [transformName: string]: AffineTransform,
      },
    },
  },
  compatibleWith: ModuleModel[],
|};
declare export var getModuleDef2: (moduleModel: ModuleModel) => ModuleDef2;
declare export function normalizeModuleModel(
  legacyModule: ModuleType
): ModuleModel;
declare export function getModuleType(moduleModel: ModuleModel): ModuleRealType;
declare export function getModuleDisplayName(moduleModel: ModuleModel): string;
declare export function checkModuleCompatibility(
  modelA: ModuleModel,
  modelB: ModuleModel
): boolean;
declare export {};
