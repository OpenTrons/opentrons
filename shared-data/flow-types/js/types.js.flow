/**
 * Flowtype definitions for types
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.13.0
 * @flow
 */

import {
  MAGDECK,
  TEMPDECK,
  THERMOCYCLER,
  MAGNETIC_MODULE_V1,
  MAGNETIC_MODULE_V2,
  TEMPERATURE_MODULE_V1,
  TEMPERATURE_MODULE_V2,
  THERMOCYCLER_MODULE_V1,
  MAGNETIC_MODULE_TYPE,
  TEMPERATURE_MODULE_TYPE,
  THERMOCYCLER_MODULE_TYPE,
  GEN1,
  GEN2,
  LEFT,
  RIGHT,
} from "./constants";
export type WellDefinition = {|
  diameter?: number,
  depth?: number,
  height: number,
  length: number,
  width: number,
  x: number,
  y: number,
  z: number,
  "total-liquid-volume": number,
|};
export type LabwareDefinition1 = {|
  metadata: {
    name: string,
    format: string,
    deprecated?: boolean,
    displayName?: string,
    displayCategory?: string,
    isValidSource?: boolean,
    isTiprack?: boolean,
    tipVolume?: number,
  },
  ordering: string[][],
  wells: {
    [well: string]: WellDefinition,
  },
|};
export type LabwareDisplayCategory =
  | "wellPlate"
  | "tipRack"
  | "tubeRack"
  | "reservoir"
  | "aluminumBlock"
  | "trash"
  | "other";
export type LabwareVolumeUnits = "ÂµL" | "mL" | "L";
export type WellBottomShape = "flat" | "u" | "v";
export type LabwareMetadata = {|
  displayName: string,
  displayCategory: LabwareDisplayCategory,
  displayVolumeUnits: LabwareVolumeUnits,
  tags?: string[],
|};
export type LabwareDimensions = {|
  xDimension: number,
  yDimension: number,
  zDimension: number,
|};
export type LabwareOffset = {|
  x: number,
  y: number,
  z: number,
|};
export type LabwareParameters = {|
  loadName: string,
  format: string,
  isTiprack: boolean,
  tipLength?: number,
  isMagneticModuleCompatible: boolean,
  magneticModuleEngageHeight?: number,
  quirks?: string[],
|};
export type LabwareBrand = {|
  brand: string,
  brandId?: string[],
  links?: string[],
|};
export type LabwareWellShapeProperties =
  | {
      shape: "circular",
      diameter: number,
    }
  | {
      shape: "rectangular",
      xDimension: number,
      yDimension: number,
    };
export type LabwareWellProperties = LabwareWellShapeProperties & {
  depth: number,
  totalLiquidVolume: number,
};
export type LabwareWell = LabwareWellProperties & {
  x: number,
  y: number,
  z: number,
};
export type LabwareWellMap = { [key: string]: LabwareWell };
export type LabwareWellGroupMetadata = {|
  displayName?: string,
  displayCategory?: LabwareDisplayCategory,
  wellBottomShape?: WellBottomShape,
|};
export type LabwareWellGroup = {|
  wells: string[],
  metadata: LabwareWellGroupMetadata,
  brand?: LabwareBrand,
|};
export type LabwareDefinition2 = {|
  version: number,
  schemaVersion: 2,
  namespace: string,
  metadata: LabwareMetadata,
  dimensions: LabwareDimensions,
  cornerOffsetFromSlot: LabwareOffset,
  parameters: LabwareParameters,
  brand: LabwareBrand,
  ordering: string[][],
  wells: LabwareWellMap,
  groups: LabwareWellGroup[],
|};
export type ModuleType = typeof MAGDECK | typeof TEMPDECK | typeof THERMOCYCLER;
export type ModuleRealType =
  | typeof MAGNETIC_MODULE_TYPE
  | typeof TEMPERATURE_MODULE_TYPE
  | typeof THERMOCYCLER_MODULE_TYPE;
export type MagneticModuleModel =
  | typeof MAGNETIC_MODULE_V1
  | typeof MAGNETIC_MODULE_V2;
export type TemperatureModuleModel =
  | typeof TEMPERATURE_MODULE_V1
  | typeof TEMPERATURE_MODULE_V2;
export type ThermocyclerModuleModel = typeof THERMOCYCLER_MODULE_V1;
export type ModuleModel =
  | MagneticModuleModel
  | TemperatureModuleModel
  | ThermocyclerModuleModel;
export type ModuleModelWithLegacy =
  | ModuleModel
  | typeof THERMOCYCLER
  | typeof MAGDECK
  | typeof TEMPDECK;
export type DeckOffset = {|
  x: number,
  y: number,
  z: number,
|};
export type Dimensions = {|
  xDimension: number,
  yDimension: number,
  zDimension: number,
|};
export type DeckRobot = {|
  model: string,
|};
export type DeckFixture = {|
  id: string,
  slot: string,
  labware: string,
  displayName: string,
|};
export type CoordinateTuple = [number, number, number];
export type UnitDirection = 1 | -1;
export type UnitVectorTuple = [UnitDirection, UnitDirection, UnitDirection];
export type DeckSlotId = string;
export type DeckSlot = {|
  id: DeckSlotId,
  position: CoordinateTuple,
  matingSurfaceUnitVector?: UnitVectorTuple,
  boundingBox: Dimensions,
  displayName: string,
  compatibleModules: ModuleType[],
|};
export type DeckCalibrationPoint = {|
  id: string,
  position: CoordinateTuple,
  displayName: string,
|};
export type DeckLocations = {|
  orderedSlots: DeckSlot[],
  calibrationPoints: DeckCalibrationPoint[],
  fixtures: DeckFixture[],
|};
export type DeckMetadata = {|
  displayName: string,
  tags: string[],
|};
export type DeckLayerFeature = {|
  footprint: string,
|};
export type DeckLayer = DeckLayerFeature[];
export type DeckDefinition = {|
  otId: string,
  cornerOffsetFromOrigin: CoordinateTuple,
  dimensions: CoordinateTuple,
  robot: DeckRobot,
  locations: DeckLocations,
  metadata: DeckMetadata,
  layers: { [key: string]: DeckLayer },
|};
export type ModuleDimensions = {|
  bareOverallHeight: number,
  overLabwareHeight: number,
  lidHeight: number,
|};
export type ModuleCalibrationPoint = {|
  x: number,
  y: number,
  z?: number,
|};
export type ModuleDefinition = {|
  labwareOffset: LabwareOffset,
  dimensions: ModuleDimensions,
  calibrationPoint: ModuleCalibrationPoint,
  displayName: string,
  loadName: string,
  quirks: string[],
|};
export type PipetteChannels = 1 | 8;
export type PipetteDisplayCategory = typeof GEN1 | typeof GEN2;
export type PipetteMount = typeof LEFT | typeof RIGHT;
export type FlowRateSpec = {|
  value: number,
  min: number,
  max: number,
|};
export type PipetteNameSpecs = {|
  name: string,
  displayName: string,
  displayCategory: PipetteDisplayCategory,
  minVolume: number,
  maxVolume: number,
  channels: PipetteChannels,
  defaultAspirateFlowRate: FlowRateSpec,
  defaultDispenseFlowRate: FlowRateSpec,
  defaultBlowOutFlowRate: FlowRateSpec,
  defaultTipracks: string[],
  smoothieConfigs?: {
    stepsPerMM: number,
    homePosition: number,
    travelDistance: number,
  },
|};
export type PipetteModelSpecs = {|
  ...$Exact<PipetteNameSpecs>,

  model: string,
  backCompatNames?: string[],
  tipLength: {
    value: number,
  },
|};
