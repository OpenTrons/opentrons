test_name: Test /labwareOffsets CRUD operations.

marks:
  - usefixtures:
      - ot3_server_base_url

stages:
  - name: Add a labware offset and check the response
    request:
      url: '{ot3_server_base_url}/labwareOffsets'
      method: POST
      json:
        data:
          definitionUri: definitionUri1
          locationSequence:
            - kind: onLabware
              labwareUri: testNamespace/testLoadName/123
            - kind: onModule
              moduleModel: thermocyclerModuleV2
            - kind: onAddressableArea
              addressableAreaName: A1
          vector:
            x: 1
            y: 1
            z: 1
    response:
      status_code: 201
      json:
        data:
          id: !anystr
          createdAt: !anystr
          definitionUri: definitionUri1
          locationSequence:
            - kind: onLabware
              labwareUri: testNamespace/testLoadName/123
            - kind: onModule
              moduleModel: thermocyclerModuleV2
            - kind: onAddressableArea
              addressableAreaName: A1
          vector:
            x: 1
            y: 1
            z: 1
      save:
        json:
          offset_1_data: data
          offset_1_id: data.id

  - name: Add another labware offset to add more testing data
    request:
      url: '{ot3_server_base_url}/labwareOffsets'
      method: POST
      json:
        data:
          definitionUri: definitionUri2
          locationSequence:
            - kind: onAddressableArea
              addressableAreaName: A2
          vector:
            x: 2
            y: 2
            z: 2
    response:
      status_code: 201
      save:
        json:
          offset_2_data: data

  - name: Add another labware offset to add more testing data
    request:
      url: '{ot3_server_base_url}/labwareOffsets'
      method: POST
      json:
        data:
          definitionUri: definitionUri3
          locationSequence:
            - kind: onAddressableArea
              addressableAreaName: A3
          vector:
            x: 3
            y: 3
            z: 3
    response:
      status_code: 201
      save:
        json:
          offset_3_data: data

  - name: Test getting all labware offsets
    request:
      url: '{ot3_server_base_url}/labwareOffsets'
      method: GET
    response:
      json:
        data:
          - !force_format_include '{offset_1_data}'
          - !force_format_include '{offset_2_data}'
          - !force_format_include '{offset_3_data}'
        meta:
          cursor: 0
          totalLength: 3

  # Just a basic test here. More complicated tests for the filters belong in the unit tests.
  - name: Test getting labware offsets with a filter
    request:
      url: '{ot3_server_base_url}/labwareOffsets'
      method: GET
      params:
        # JSON turducken:
        # - The query parameter value is a string containing JSON
        # - Putting single quotes around it keeps it as a string and keeps YAML from interpreting it as an object
        # - Putting !raw before it prevents Tavern from trying to do {substitution}
        filter: !raw '{"locationSequence":[{"kind":"onAddressableArea","addressableAreaName":"A2"}]}'
    response:
      json:
        data:
          - !force_format_include '{offset_2_data}'
        meta:
          cursor: 0
          totalLength: 1

  - name: Delete a labware offset
    request:
      url: '{ot3_server_base_url}/labwareOffsets/{offset_1_id}'
      method: DELETE
    response:
      json:
        data: !force_format_include '{offset_1_data}'

  - name: Make sure it got deleted
    request:
      url: '{ot3_server_base_url}/labwareOffsets'
    response:
      json:
        data:
          - !force_format_include '{offset_2_data}'
          - !force_format_include '{offset_3_data}'
        meta:
          cursor: 0
          totalLength: 2

  - name: Delete all labware offsets
    request:
      url: '{ot3_server_base_url}/labwareOffsets'
      method: DELETE
    response:
      json: {}

  - name: Make sure they all got deleted
    request:
      url: '{ot3_server_base_url}/labwareOffsets'
    response:
      json:
        data: []
        meta:
          cursor: 0
          totalLength: 0

---
test_name: Test POSTing multiple offsets in a single request

marks:
  - usefixtures:
      - ot3_server_base_url

stages:
  - name: POST multiple offsets and check the response
    request:
      method: POST
      url: '{ot3_server_base_url}/labwareOffsets'
      json:
        data:
          - definitionUri: testNamespace/loadName1/1
            locationSequence:
              - kind: onAddressableArea
                addressableAreaName: A1
            vector:
              x: 1
              y: 1
              z: 1
          - definitionUri: testNamespace/loadName2/1
            locationSequence:
              - kind: onAddressableArea
                addressableAreaName: A2
            vector:
              x: 2
              y: 2
              z: 2
    response:
      status_code: 201
      json:
        data:
          - id: !anystr
            createdAt: !anystr
            definitionUri: testNamespace/loadName1/1
            locationSequence:
              - kind: onAddressableArea
                addressableAreaName: A1
            vector:
              x: 1
              y: 1
              z: 1
          - id: !anystr
            createdAt: !anystr
            definitionUri: testNamespace/loadName2/1
            locationSequence:
              - kind: onAddressableArea
                addressableAreaName: A2
            vector:
              x: 2
              y: 2
              z: 2
      save:
        json:
          offset_1_data: data[0]
          offset_2_data: data[1]

  - name: POST an empty list of offsets and check the response
    request:
      method: POST
      url: '{ot3_server_base_url}/labwareOffsets'
      json:
        data: []
    response:
      status_code: 201
      json:
        data: []

  - name: Make sure all offsets got stored
    request:
      url: '{ot3_server_base_url}/labwareOffsets'
    response:
      json:
        data:
          - !force_format_include '{offset_1_data}'
          - !force_format_include '{offset_2_data}'
        meta:
          cursor: 0
          totalLength: 2
