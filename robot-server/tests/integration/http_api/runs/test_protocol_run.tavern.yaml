test_name: Upload and run a protocol.

marks:
  - usefixtures:
      - run_server
stages:
  - name: Upload a protocol
    request:
      url: '{host:s}:{port:d}/protocols'
      method: POST
      files:
        files: 'tests/integration/protocols/load_one_labware.py'
    response:
      status_code: 201
      save:
        json:
          protocol_id: data.id

  - name: Create run from protocol
    request:
      url: '{host:s}:{port:d}/runs'
      method: POST
      json:
        data:
          protocolId: '{protocol_id}'
    response:
      status_code: 201
      json:
        data:
          id: !anystr
          createdAt: !re_search "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+\\+\\d{2}:\\d{2}$"
          status: idle
          current: True
          actions: []
          errors: []
          pipettes: []
          labware:
            - id: !anystr
              loadName: !anystr
              definitionUri: opentrons/opentrons_1_trash_1100ml_fixed/1
              location: !anydict
          labwareOffsets: []
          protocolId: '{protocol_id}'
      save:
        json:
          run_data: data
          run_id: data.id

  - name: Get the specific run we just created, by its ID, and make sure it's the same
    request:
      url: '{host:s}:{port:d}/runs/{run_id}'
      method: GET
    response:
      status_code: 200
      json:
        # Check that `data` is identical to the original POSTed run.
        data: !force_format_include '{run_data}'

  - name: Get all runs and make sure our run is included
    request:
      url: '{host:s}:{port:d}/runs'
      method: GET
    response:
      strict:
        # The run_server fixture has session scope and is is reused across tests.
        # So, other tests may create their own runs that will show up here.
        # Ignore them.
        - json:off
      status_code: 200
      json:
        # Check that the `data` list contains at least one element that's
        # the original POSTed run.
        data:
          - !force_format_include '{run_data}'

  - name: Add a labware offset to the run
    request:
      url: '{host:s}:{port:d}/runs/{run_id}/labware_offsets'
      method: POST
      json:
        data:
          definitionUri: opentrons/biorad_96_wellplate_200ul_pcr/1
          location:
            slotName: "1"
          vector:
            x: 1.11
            y: 2.22
            z: 3.33
    response:
      status_code: 201
      json:
        data:
          id: !anystr
          createdAt: !re_search "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+\\+\\d{2}:\\d{2}$"
          definitionUri: opentrons/biorad_96_wellplate_200ul_pcr/1
          location:
            slotName: "1"
          vector:
            x: 1.11
            y: 2.22
            z: 3.33
      save:
        json:
          labware_offset_id: data.id

  - name: Play the run
    request:
      url: '{host:s}:{port:d}/runs/{run_id}/actions'
      method: POST
      json:
        data:
          actionType: play
    response:
      status_code: 201
      json:
        data:
          id: !anystr
          actionType: play
          createdAt: !re_search "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+\\+\\d{2}:\\d{2}$"
      save:
        json:
          play_action_id: data.id

  - name: Get the run again and look for the new labware offset and play action
    request:
      url: '{host:s}:{port:d}/runs/{run_id}'
      method: GET
    response:
      status_code: 200
      strict:
        - json:off
      json:
        data:
          labwareOffsets:
            - id: !anystr
              createdAt: !re_search "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+\\+\\d{2}:\\d{2}$"
              definitionUri: opentrons/biorad_96_wellplate_200ul_pcr/1
              location:
                slotName: "1"
              vector:
                x: 1.11
                y: 2.22
                z: 3.33
            # Extra offsets would be ignored because strict checking is disabled.
          actions:
            - id: '{play_action_id}'
              createdAt: !re_search "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+\\+\\d{2}:\\d{2}$"
              actionType: play
            # Extra actions would be ignored because strict checking is disabled.
          # Other fields are ignored. because strict checking is disabled.
          # Note that since the run is still playing at this point, many of them
          # (like status and labware) would be nondeterministic.

  - name: Wait for the protocol to complete
    max_retries: 10
    delay_after: 0.1
    request:
      url: '{host:s}:{port:d}/runs/{run_id}'
      method: GET
    response:
      strict:
        - json:off
      json:
        data:
          status: succeeded

  - name: Verify commands succeeded with the expected results
    request:
      url: '{host:s}:{port:d}/runs/{run_id}/commands'
      method: GET
    response:
      json:
        links:
          current: !anydict
        meta:
          cursor: 0
          totalLength: 1
        data:
          - id: !anystr
            key: !anystr
            commandType: loadLabware
            status: succeeded
            params:
              location:
                slotName: '1'
              loadName: 'biorad_96_wellplate_200ul_pcr'
              namespace: 'opentrons'
              version: 1
            createdAt: !re_search "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+\\+\\d{2}:\\d{2}$"
            startedAt: !re_search "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+\\+\\d{2}:\\d{2}$"
            completedAt: !re_search "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+\\+\\d{2}:\\d{2}$"
      save:
        json:
          load_labware_command_id: data[0].id

  - name: Get full details of the load labware command and make sure the offset applied
    request:
      url: '{host:s}:{port:d}/runs/{run_id}/commands/{load_labware_command_id}'
      method: GET
    response:
      json:
        data:
          id: '{load_labware_command_id}'
          key: !anystr
          commandType: loadLabware
          status: succeeded
          params:
            location:
              slotName: '1'
            loadName: 'biorad_96_wellplate_200ul_pcr'
            namespace: 'opentrons'
            version: 1
          result:
            labwareId: !anystr
            # Labware definitions are inconveniently verbose to test,
            # so we just trust that this is correct.
            definition: !anydict
            offsetId: '{labware_offset_id}'
          createdAt: !re_search "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+\\+\\d{2}:\\d{2}$"
          startedAt: !re_search "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+\\+\\d{2}:\\d{2}$"
          completedAt: !re_search "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+\\+\\d{2}:\\d{2}$"


# todo(mm, 2022-05-17):
# - Test command details
# - Test that PATCH returns the same run, except with `current` set to false
# - POST some labware offsets, test that they show up in the run,
#   test that they show up in commands?
#   Maybe put this in a different file?
