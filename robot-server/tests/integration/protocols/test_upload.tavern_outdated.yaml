---
test_name: Upload basic_transfer_standalone protocol with full response validation.
marks:
  - usefixtures:
      - run_server
stages:
  - name: Upload basic_transfer_standalone protocol
    request:
      url: "{host:s}:{port:d}/protocols"
      method: POST
      files:
        protocolFile: "tests/integration/protocols/basic_transfer_standalone.py"
    response:
      save:
        json:
          protocol_id: data.id
      status_code: 201
      json:
        data: &response_data
          id: !anystr
          protocolFile:
            basename: basic_transfer_standalone.py
          supportFiles: []
          lastModifiedAt: &dt
            !re_search "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+\\+\\d{2}:\\d{2}$"
          createdAt: *dt
          metadata:
            author: engineer@opentrons.com
            apiLevel: "2.6"
            name: basic_transfer_standalone
          requiredEquipment:
            pipettes:
              - mount: right
                requestedAs: p300_single
                pipetteName: p300_single
                channels: 1
            labware:
              - label: corning_96_wellplate_360ul_flat
                uri: opentrons/corning_96_wellplate_360ul_flat/1
                location: 1
              - label: opentrons_96_tiprack_300ul
                uri: opentrons/opentrons_96_tiprack_300ul/1
                location: 2
              # Trash slot. Don't care what is there.
              - uri: !anystr
                location: 12
                label: !anystr
            modules: []
          errors: []
        links:
          self:
            href: !anystr
          protocols:
            href: '/protocols'
          protocolById:
            href: '/protocols/{{protocolId}}'
  - name: Get the protocol. Checking that response is the same as POST response.
    request:
      url: "{host:s}:{port:d}/protocols/{protocol_id}"
      method: GET
    response:
      status_code: 200
      json:
        data: *response_data
        links:
          self:
            href: '/protocols/{protocol_id}'
          protocols:
            href: '/protocols'
          protocolById:
            href: '/protocols/{{protocolId}}'
  - name: Delete the protocol
    request:
      url: "{host:s}:{port:d}/protocols/{protocol_id}"
      method: DELETE
    response:
      status_code: 200
      json:
        data: *response_data
        links:
          self:
            href: '/protocols'
          protocolById:
            href: '/protocols/{{protocolId}}'
  - name: Get all protocols to verify that there are none
    request:
      url: "{host:s}:{port:d}/protocols"
      method: GET
    response:
      status_code: 200
      json:
        data: []
        links:
          self:
             href: '/protocols'
          protocolById:
            href: '/protocols/{{protocolId}}'
