---
test_name: Protocol session unknown protocol
strict:
  - json:on
marks:
  - usefixtures:
      - run_server
      - set_enable_http_protocol_sessions
stages:
  - name: Create the session
    request:
      url: "{host:s}:{port:d}/sessions"
      method: POST
      json:
        data:
          sessionType: protocol
          createParams:
            protocolId: "my_protocol"
    response:
      status_code: 404
---
test_name: Protocol Session Cannot be created due to feature flag
strict:
  - json:on
marks:
  - usefixtures:
      - run_server
stages:
  - name: Upload a protocol to use with the session
    request:
      url: "{host:s}:{port:d}/protocols"
      method: POST
      files:
        protocolFile: "tests/integration/protocols/basic_transfer_standalone.py"
    response:
      save:
        json:
          protocol_id: data.id
      status_code: 201
  - name: Can't create session due to feature flag
    request:
      url: "{host:s}:{port:d}/sessions"
      method: POST
      json:
        data:
          sessionType: protocol
          createParams:
            protocolId: "{protocol_id}"
    response:
      status_code: 403
      json:
        errors:
        - id: "UncategorizedError"
          title: Action Forbidden
          detail: "HTTP Protocol Session feature is disabled"
  - name: Delete the protocol
    request:
      url: "{host:s}:{port:d}/protocols/{protocol_id}"
      method: DELETE
---
test_name: Protocol session life cycle
strict:
  - json:on
marks:
  - usefixtures:
      - run_server
      - set_enable_http_protocol_sessions
stages:
  - name: Upload a protocol to use with the session
    request:
      url: "{host:s}:{port:d}/protocols"
      method: POST
      files:
        protocolFile: "tests/integration/protocols/basic_transfer_standalone.py"
    response:
      save:
        json:
          protocol_id: data.id
      status_code: 201
  - name: Create the session
    request:
      url: "{host:s}:{port:d}/sessions"
      method: POST
      json:
        data:
          sessionType: protocol
          createParams:
            protocolId: "{protocol_id}"
    response:
      status_code: 201
      save:
        json:
          session_id: data.id
      json: &proto_session
        data:
          id: !anystr
          sessionType: protocol
          createParams:
            protocolId: "{protocol_id}"
          createdAt: !anystr
          details:
            protocolId: "{protocol_id}"
            currentState: !anystr
            events: !anylist
        links: !anydict
  - name: Get the session
    request:
      url: "{host:s}:{port:d}/sessions/{session_id}"
      method: GET
    response:
      status_code: 200
      json: *proto_session
  - name: Delete the session
    request:
      url: "{host:s}:{port:d}/sessions/{session_id}"
      method: DELETE
    response:
      status_code: 200
      json: *proto_session
  - name: Get the session will fail
    request:
      url: "{host:s}:{port:d}/sessions/{session_id}"
      method: GET
    response:
      status_code: 404
  - name: Delete the protocol
    request:
      url: "{host:s}:{port:d}/protocols/{protocol_id}"
      method: DELETE
---
test_name: Protocol session with support file
strict:
  - json:on
marks:
  - usefixtures:
      - run_server
      - set_enable_http_protocol_sessions
stages:
  - name: Upload a protocol that uses a custom labware
    request:
      url: "{host:s}:{port:d}/protocols"
      method: POST
      files:
        protocolFile: "tests/integration/protocols/load_custom_labware.py"
        supportFiles: "tests/integration/protocols/test_1_reservoir_5ul.json"
    response:
      save:
        json:
          protocol_id: data.id
      status_code: 201
  - name: Create the session and wait for simulation
    request:
      url: "{host:s}:{port:d}/sessions"
      method: POST
      json:
        data:
          sessionType: protocol
          createParams:
            protocolId: "{protocol_id}"
    response:
      status_code: 201
      save:
        json:
          session_id: data.id
      json:
        data:
          id: !anystr
          sessionType: protocol
          createParams:
            protocolId: "{protocol_id}"
          createdAt: !anystr
          details:
            protocolId: "{protocol_id}"
            currentState: !anystr
            events: !anylist
        links: !anydict
    delay_after: 0.5  # Let simulation complete
  - name: Get the session and make sure it's in loaded state.
    request:
      url: "{host:s}:{port:d}/sessions/{session_id}"
      method: GET
    response:
      status_code: 200
      json:
        data:
          id: !anystr
          sessionType: protocol
          createParams:
            protocolId: "{protocol_id}"
          createdAt: !anystr
          details:
            protocolId: "{protocol_id}"
            currentState: loaded
            events: []
        links: !anydict
  - name: Run the protocol
    request:
      url: "{host:s}:{port:d}/sessions/{session_id}/commands/execute"
      method: POST
      json:
        data:
          command: protocol.startRun
          data: {}
    response:
      status_code: 200
      json: !anydict
    delay_after: 0.5  # Let run complete
  - name: Get the session and make sure it's in finished state.
    request:
      url: "{host:s}:{port:d}/sessions/{session_id}"
      method: GET
    response:
      status_code: 200
      json:
        data:
          id: !anystr
          sessionType: protocol
          createParams:
            protocolId: "{protocol_id}"
          createdAt: !anystr
          details:
            protocolId: "{protocol_id}"
            currentState: finished
            events:
              - source: sessionCommand
                event: protocol.startRun
                timestamp: !anystr
                commandId: !anystr
                params: null
                result: null
        links: !anydict
  - name: Delete the session
    request:
      url: "{host:s}:{port:d}/sessions/{session_id}"
      method: DELETE
    response:
      status_code: 200
      json: !anydict
  - name: Delete the protocol
    request:
      url: "{host:s}:{port:d}/protocols/{protocol_id}"
      method: DELETE
