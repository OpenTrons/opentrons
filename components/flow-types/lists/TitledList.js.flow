/**
 * Flowtype definitions for TitledList
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.13.0
 * @flow
 */

import * as React from "react";
import type { IconName, IconProps } from "../icons";
export type TitledListProps = {|
  /**
   * id attribute
   */
  id?: string,

  /**
   * text of title
   */
  title: string,

  /**
   * optional icon left of the title
   */
  iconName?: IconName | null | void,

  /**
   * props passed down to icon (`className` and `name` are ignored)
   */
  iconProps?: Omit<IconProps, "name">,

  /**
   * optional data test id for the container
   */
  "data-test"?: string,

  /**
   * children must all be `<li>`
   */
  children?: React.Node,

  /**
   * additional classnames
   */
  className?: string,

  /**
   * component with descriptive text about the list
   */
  description?: React.Node,

  /**
   * optional click action (on title div, not children)
   */
  onClick?: (event: React.MouseEvent<>) => mixed,

  /**
   * optional right click action (on wrapping div)
   */
  onContextMenu?: (event: React.MouseEvent<>) => mixed,

  /**
   * optional mouseEnter action
   */
  onMouseEnter?: (event: React.MouseEvent<>) => mixed,

  /**
   * optional mouseLeave action
   */
  onMouseLeave?: (event: React.MouseEvent<>) => mixed,

  /**
   * caret click action; if defined, list is expandable and carat is visible
   */
  onCollapseToggle?: (event: React.MouseEvent<>) => mixed,

  /**
   * collapse the list if true (false by default)
   */
  collapsed?: boolean,

  /**
   * set to true when TitledList is selected (eg, user clicked it)
   */
  selected?: boolean,

  /**
   * set to true when TitledList is hovered (but not when its contents are hovered)
   */
  hovered?: boolean,

  /**
   * disables the whole TitledList if true
   */
  disabled?: boolean,

  /**
   * appear disabled, but preserve collapsibility
   */
  inert?: boolean,
|};

/**
 * An ordered list with optional title, icon, and description.
 */
declare export function TitledList(props: TitledListProps): React$Node;
