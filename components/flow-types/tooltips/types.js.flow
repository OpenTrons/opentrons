/**
 * Flowtype definitions for types
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.13.0
 * @flow
 */

import type { CSSProperties } from "react";
import type { Instance, Options, Modifier } from "@popperjs/core/lib/types";
import type { UseHoverOptions, HoverHandlers } from "../interaction-enhancers";
export type Placement = $PropertyType<Options, "placement">;
export type Strategy = $PropertyType<Options, "strategy">;
export type PopperInstance = Instance;
export type PopperOptions = Options;
export type PopperModifer<T> = Modifier<T>;
export type HandleStateUpdate = (
  placement: Placement,
  styles: {
    popper?: CSSProperties,
    arrow?: CSSProperties,
  }
) => void;
export type UsePopperOptions = {|
  target: Element | null,
  tooltip: HTMLElement | null,
  arrow: HTMLElement | null,
  onStateUpdate: HandleStateUpdate,
  placement?: Placement | null,
  strategy?: Strategy | null,
  offset?: number,
|};
export type UsePopperResult = Instance | null;
export type UseTooltipOptions = {|
  placement?: Placement,
  strategy?: Strategy,
  offset?: number,
|};
export type UseTooltipResultTargetProps = {|
  ref: React$RefCallback<Element | null>,
  "aria-describedby": string,
|};
export type UseTooltipResultTooltipProps = {|
  id: string,
  ref: React$RefCallback<HTMLElement | null>,
  placement: Placement | null,
  style: CSSProperties,
  arrowRef: React$RefCallback<HTMLElement | null>,
  arrowStyle: CSSProperties,
|};
export type UseTooltipResult = [
  UseTooltipResultTargetProps,
  UseTooltipResultTooltipProps
];
export type UseHoverTooltipOptions = $Rest<
  UseTooltipOptions & UseHoverOptions,
  {}
>;
export type UseHoverTooltipTargetProps = {|
  ...$Exact<UseTooltipResultTargetProps>,
  ...$Exact<HoverHandlers>,
|};
export type UseHoverTooltipResult = [
  UseHoverTooltipTargetProps,
  UseTooltipResultTooltipProps & {
    visible: boolean,
  }
];
