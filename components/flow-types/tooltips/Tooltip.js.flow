/**
 * Flowtype definitions for Tooltip
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.13.0
 * @flow
 */

import * as React from "react";
import type { CSSProperties } from "react";
import type { Placement } from "./types";
import type { StyleProps } from "../primitives";
export type TooltipProps = {|
  ...$Exact<StyleProps>,

  /**
   * Whether or not the tooltip should be rendered
   */
  visible: boolean,

  /**
   * Contents of the tooltip
   */
  children?: React.Node,

  /**
   * Tooltip element ID (provided by useTooltip). Will match
   * targetProps.aria-describedby
   */
  id: string,

  /**
   * Actual tooltip placement, if known (provided by useTooltip)
   */
  placement: Placement | null,

  /**
   * Inline styles to apply to the tooltip element (provided by useTooltip)
   */
  style: CSSProperties,

  /**
   * React function ref for tooltip's arrow element (provided by useTooltip)
   */
  arrowRef: React.RefCallback<HTMLElement | null>,

  /**
   * Inline styles to apply to arrow element (provided by useTooltip)
   */
  arrowStyle: CSSProperties,
|};

/**
 * Tooltip component that renders based on its `visible` prop. For use with the
 * `useTooltip` and `useHoverTooltip` hooks. See examples in `Tooltip.md`.
 */
declare export var Tooltip: React.ForwardRefExoticComponent<
  TooltipProps & React.RefAttributes<HTMLDivElement>
>;
export type ArrowProps = {|
  placement: Placement | null,
  arrowRef: React.RefCallback<HTMLElement>,
  arrowStyle: CSSProperties,
|};
declare export function Arrow(props: ArrowProps): React$Node;
