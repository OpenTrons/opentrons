/**
 * Flowtype definitions for DeprecatedTooltip
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.13.0
 * @flow
 */

import * as React from "react";
import { Popper } from "react-popper";
declare type PopperProps = React.ComponentProps<typeof Popper>;
export type DeprecatedTooltipProps = {|
  /**
   * show or hide the tooltip
   */
  open?: boolean,

  /**
   * contents of the tooltip
   */
  tooltipComponent: React.Node,

  /**
   * optional portal to place the tooltipComponent inside
   */
  portal?: React.ComponentType<any>,

  /**
   * <https://github.com/FezVrasta/react-popper#placement>
   */
  placement?: $PropertyType<PopperProps, "placement">,

  /**
   * <https://github.com/FezVrasta/react-popper#positionfixed>
   */
  positionFixed?: $PropertyType<PopperProps, "positionFixed">,

  /**
   * <https://github.com/FezVrasta/react-popper#modifiers>
   */
  modifiers?: $PropertyType<PopperProps, "modifiers">,

  /**
   * render function for tooltip'd component
   */
  children: (props?: React.PropsWithRef<any>) => React$Node | null,

  /**
   * extra props to pass to the children render function
   */
  childProps?: React.PropsWithRef<any>,
|};

/**
 * Basic, fully controlled Tooltip component.
 *
 * `props.children` is a function that receives the following props object:
 * ```js
 * type TooltipChildProps = {
 *  ref: React.Ref<*>,
 * }
 * ```
 *
 * `props.childProps` can be used to add extra fields to the child props object
 * @deprecated Use `Tooltip` and `useTooltip` instead
 */
declare export function DeprecatedTooltip(
  props: DeprecatedTooltipProps
): React$Node | null;
declare export {};
