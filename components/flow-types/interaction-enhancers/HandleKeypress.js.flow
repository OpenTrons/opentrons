/**
 * Flowtype definitions for HandleKeypress
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.13.0
 * @flow
 */

import * as React from "react";
export type KeypressHandler = {|
  key: string,
  shiftKey?: boolean | null | void,
  onPress: () => mixed,
|};
export type HandleKeypressProps = {|
  /**
   * array of keypress handlers to attach to the window
   */
  handlers: KeypressHandler[],

  /**
   * optionally call event.preventDefault if keypress is handled
   */
  preventDefault?: boolean | null | void,

  /**
   * wrapped children
   */
  children?: React.Node,
|};

/**
 * Keypress handler wrapper component. Takes an array of keypress handlers
 * to call when a given key is pressed on the keyboard. Handler is called on
 * `keyup` event. `event.preventDefault` will be called if a key is handled
 * and `props.preventDefault` is true.
 */
declare export class HandleKeypress
  mixins React.Component<HandleKeypressProps> {
  handlePressIfKey: (event: KeyboardEvent) => void;
  preventDefaultIfKey: (event: KeyboardEvent) => void;
  componentDidMount(): void;
  componentWillUnmount(): void;
  render(): React$Node;
}
