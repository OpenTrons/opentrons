"""Utility functions for the Flex Stacker EVT QC module."""
from collections import defaultdict
import statistics
from typing import Dict, List
from opentrons.drivers.flex_stacker.driver import TOFSensor
from opentrons.drivers.flex_stacker.utils import NUMBER_OF_BINS, NUMBER_OF_ZONES
from hardware_testing.data import ui
from hardware_testing.data.csv_report import (
    CSVReport,
    CSVResult,
)

from .driver import FlexStackerInterface as FlexStacker
from opentrons.drivers.flex_stacker.types import StackerAxis, Direction


async def test_limit_switches_per_direction(
    stacker: FlexStacker,
    axis: StackerAxis,
    direction: Direction,
    report: CSVReport,
    section: str,
    speed: float | None = None,
    acceleration: float | None = None,
    current: float | None = None,
) -> None:
    """Sequence to test the limit switch for one direction."""
    ui.print_header(f"{axis} Limit Switch - {direction} direction")
    # first make sure switch is not already triggered by moving in the opposite direction
    if await stacker._driver.get_limit_switch(axis, direction):
        print(f"{direction} switch already triggered, moving away...\n")
        SAFE_DISTANCE_MM = 10

        await stacker.move_axis(
            axis, direction.opposite(), SAFE_DISTANCE_MM, speed, acceleration, current
        )

    # move until the limit switch is reached
    print(f"moving towards {direction} limit switch...\n")
    await stacker.home_axis(axis, direction, speed, acceleration, current)

    result = await stacker._driver.get_limit_switch(axis, direction)
    opposite_result = not await stacker._driver.get_limit_switch(
        axis, direction.opposite()
    )
    print(f"{direction} switch triggered: {result}")
    print(f"{direction.opposite()} switch untriggered: {opposite_result}")
    report(
        section,
        f"limit-switch-trigger-{direction}-untrigger-{direction.opposite()}",
        [result, opposite_result, CSVResult.from_bool(result and opposite_result)],
    )


# fmt: off
# type: ignore
TOF_BASELINE_X = {0: [25.42, 54.97, 27.56, 28.07, 26.5, 40.87, 23.49, 29.5, 47.75, 41.85, 49.35, 142.01, 1314.89, 15986.7, 48084.04, 35914.85, 19003.72, 11195.0, 8471.2, 7181.98, 6309.58, 5623.52, 6029.2, 5883.29, 4802.33, 4275.64, 3990.24, 21443.39, 24256.26, 19349.84, 10615.07, 5287.87, 3635.82, 2758.24, 2241.44, 2033.14, 1817.38, 1558.59, 1202.49, 1273.71, 1028.52, 978.31, 975.18, 844.62, 804.33, 687.38, 662.63, 576.92, 658.72, 630.42, 537.41, 424.54, 477.29, 523.17, 518.56, 400.3, 375.08, 352.3, 410.23, 386.15, 298.71, 338.42, 349.54, 305.41, 352.7, 264.8, 325.72, 270.97, 274.06, 242.37, 208.63, 214.29, 246.25, 227.25, 189.46, 214.08, 181.62, 181.84, 198.81, 184.29, 194.32, 161.79, 156.23, 159.75, 218.35, 117.5, 166.16, 211.72, 162.5, 144.89, 129.14, 143.7, 132.09, 140.48, 144.5, 113.25, 133.28, 163.98, 113.74, 130.04, 96.51, 95.67, 97.58, 94.77, 132.55, 98.96, 61.04, 85.56, 103.22, 79.81, 87.79, 88.72, 74.31, 72.82, 81.9, 58.49, 85.81, 73.61, 64.92, 74.23, 80.74, 48.27, 73.07, 62.01, 57.53, 67.26, 71.04, 42.58], 1: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 2: [54.62, 32.84, 44.45, 55.25, 53.68, 30.56, 26.22, 29.87, 35.76, 40.37, 48.62, 36.49, 61.57, 213.07, 270.11, 176.26, 121.82, 125.3, 137.3, 212.61, 353.87, 285.68, 291.71, 473.14, 814.07, 501.22, 308.22, 304.09, 1179.94, 1195.06, 938.4, 609.32, 266.47, 239.65, 152.51, 131.31, 129.9, 140.67, 78.17, 74.92, 89.02, 55.17, 71.32, 80.18, 62.67, 51.5, 41.25, 55.02, 35.06, 65.3, 69.85, 54.36, 46.46, 33.87, 44.62, 32.04, 53.59, 61.47, 44.93, 36.92, 52.7, 48.37, 46.42, 48.45, 24.72, 31.45, 52.8, 40.93, 49.89, 38.77, 32.25, 41.2, 56.59, 42.97, 44.48, 60.31, 30.59, 37.49, 118.29, 161.94, 154.86, 93.98, 53.49, 60.92, 111.65, 116.69, 113.09, 85.57, 51.77, 54.21, 35.35, 56.12, 63.59, 32.5, 43.49, 38.43, 38.49, 43.34, 47.46, 51.19, 59.59, 48.85, 35.3, 56.09, 30.74, 54.24, 62.92, 91.09, 77.8, 51.69, 52.17, 38.77, 54.54, 55.99, 44.21, 41.27, 46.53, 26.49, 39.43, 55.61, 52.87, 61.07, 57.23, 73.24, 64.88, 36.42, 43.13, 43.93], 3: [16.53, 26.7, 6.0, 20.17, 13.5, 8.72, 11.54, 26.21, 16.77, 13.96, 23.73, 16.46, 34.01, 91.82, 146.89, 111.25, 83.1, 53.31, 56.0, 66.42, 146.22, 170.3, 140.83, 215.84, 397.35, 381.12, 294.59, 164.8, 472.29, 717.34, 652.33, 408.68, 266.57, 153.13, 108.3, 98.24, 101.25, 78.49, 91.4, 76.26, 39.3, 45.37, 58.18, 37.82, 29.58, 35.35, 28.43, 26.94, 18.54, 32.35, 26.92, 13.22, 24.17, 15.7, 22.73, 23.25, 18.49, 26.87, 12.85, 16.21, 28.3, 21.77, 39.62, 23.27, 26.92, 36.53, 17.35, 14.7, 26.17, 28.25, 27.97, 58.45, 38.87, 45.21, 30.82, 17.5, 15.49, 27.9, 39.2, 115.42, 142.33, 80.61, 81.8, 36.73, 48.56, 54.7, 51.39, 41.09, 55.25, 52.61, 25.49, 17.5, 18.12, 19.46, 22.27, 18.27, 17.45, 22.66, 14.21, 19.53, 18.27, 17.96, 13.35, 30.13, 19.5, 14.35, 13.21, 11.72, 16.04, 15.49, 10.72, 26.44, 15.62, 24.73, 12.5, 14.12, 14.54, 22.66, 17.0, 24.73, 21.25, 17.45, 21.42, 28.49, 11.5, 25.42, 15.62, 16.45], 4: [15.49, 11.21, 8.72, 9.72, 17.74, 18.25, 16.46, 10.04, 8.72, 19.25, 16.62, 16.12, 26.42, 69.57, 157.79, 120.96, 57.34, 62.65, 41.27, 84.76, 123.69, 192.5, 121.87, 158.71, 505.74, 468.8, 329.17, 218.56, 678.86, 1060.82, 1046.93, 601.61, 319.39, 179.22, 133.37, 116.26, 228.2, 284.5, 285.27, 111.44, 122.14, 68.37, 57.01, 50.42, 49.83, 41.42, 56.76, 47.3, 59.25, 39.27, 46.3, 75.02, 41.09, 37.35, 23.73, 28.49, 23.25, 24.27, 42.14, 41.12, 68.42, 84.26, 110.02, 93.47, 99.93, 45.43, 48.82, 21.7, 20.62, 28.42, 34.87, 58.54, 55.21, 36.49, 26.35, 39.13, 18.62, 25.09, 32.13, 98.16, 132.41, 69.3, 44.24, 37.43, 27.45, 25.22, 24.29, 29.32, 41.84, 28.09, 23.17, 19.77, 14.22, 28.87, 20.74, 24.17, 31.54, 16.77, 15.5, 17.22, 11.22, 20.67, 31.98, 16.04, 17.96, 9.85, 15.04, 11.72, 18.12, 23.34, 18.87, 22.09, 21.25, 22.27, 24.93, 19.58, 33.06, 25.37, 12.79, 22.09, 27.85, 21.3, 15.21, 12.72, 28.62, 14.72, 19.92, 20.77], 5: [21.3, 20.42, 13.5, 10.54, 7.22, 12.45, 16.96, 19.27, 13.5, 15.96, 19.09, 27.7, 19.74, 68.79, 146.24, 116.18, 64.37, 50.82, 54.45, 54.66, 99.63, 96.29, 131.82, 170.8, 618.84, 665.49, 561.92, 387.63, 8724.13, 11255.24, 7466.54, 3238.16, 1685.27, 1141.39, 884.77, 605.99, 505.36, 530.18, 393.3, 342.85, 224.57, 180.75, 182.4, 163.89, 137.34, 138.43, 78.97, 64.37, 76.68, 72.18, 57.5, 51.5, 51.95, 37.92, 17.72, 30.73, 32.12, 20.27, 18.54, 22.22, 28.24, 26.27, 34.89, 23.35, 36.62, 42.65, 24.7, 16.5, 22.25, 15.21, 21.74, 33.0, 30.3, 13.7, 22.87, 20.92, 18.27, 26.42, 17.45, 48.34, 68.85, 49.64, 28.58, 41.0, 22.22, 32.49, 31.42, 63.82, 47.45, 27.27, 31.39, 39.12, 24.22, 20.73, 18.27, 22.87, 26.62, 21.09, 19.22, 29.5, 14.21, 15.12, 17.92, 19.74, 19.58, 14.49, 17.09, 11.72, 13.22, 15.45, 8.35, 21.56, 18.49, 16.04, 13.04, 16.09, 19.7, 16.22, 10.79, 16.96, 26.44, 19.45, 24.34, 12.35, 15.21, 16.45, 20.22, 15.09], 6: [16.92, 9.79, 17.74, 16.24, 15.96, 10.21, 8.7, 15.27, 20.92, 9.22, 12.24, 16.27, 19.77, 94.17, 86.49, 79.42, 51.81, 33.22, 59.46, 79.69, 123.91, 134.24, 178.22, 348.5, 743.05, 577.62, 395.12, 26351.1, 58304.2, 46965.53, 23996.16, 10343.55, 5427.11, 3912.68, 2842.71, 2046.68, 1796.04, 1138.14, 1046.3, 762.14, 623.25, 624.34, 609.46, 595.42, 432.2, 233.71, 226.13, 180.91, 143.33, 79.62, 91.26, 91.57, 59.82, 44.42, 39.49, 47.5, 50.16, 40.12, 33.94, 26.46, 38.82, 18.04, 38.16, 17.0, 25.66, 47.57, 21.42, 14.54, 20.24, 25.66, 32.85, 18.45, 22.84, 13.04, 20.87, 15.49, 21.97, 36.21, 46.16, 27.5, 36.34, 17.27, 15.21, 23.24, 24.66, 28.42, 26.92, 37.37, 21.22, 15.21, 13.21, 21.07, 22.42, 25.5, 20.58, 11.79, 17.58, 26.71, 10.04, 11.7, 10.22, 19.42, 16.87, 21.77, 15.21, 9.7, 15.04, 15.12, 13.49, 11.29, 26.44, 24.42, 12.21, 9.7, 13.45, 15.22, 21.17, 11.79, 12.79, 14.79, 17.12, 16.39, 19.22, 18.92, 29.35, 19.77, 21.77, 10.79], 7: [5.5, 8.72, 17.53, 14.77, 8.7, 12.54, 12.49, 13.77, 10.21, 16.22, 15.04, 12.21, 24.92, 104.97, 127.12, 85.39, 39.77, 42.67, 61.84, 136.09, 109.67, 186.99, 209.93, 499.3, 639.72, 515.18, 340.9, 4153.99, 11476.6, 23503.35, 16035.97, 7354.79, 3250.34, 1930.85, 1391.73, 1230.33, 923.38, 617.07, 454.57, 449.31, 319.92, 317.19, 218.5, 200.84, 215.19, 152.37, 117.29, 72.62, 75.73, 65.65, 51.15, 30.62, 45.17, 37.44, 35.74, 22.77, 25.73, 29.62, 22.42, 23.06, 28.49, 20.73, 25.49, 30.21, 32.12, 20.73, 18.59, 29.35, 12.21, 9.72, 16.62, 18.03, 19.25, 15.09, 16.77, 17.24, 13.54, 19.42, 28.49, 28.54, 14.04, 19.3, 19.25, 32.42, 21.3, 18.49, 20.96, 14.12, 15.59, 17.46, 12.54, 20.06, 10.79, 24.42, 17.92, 13.21, 17.77, 14.96, 17.22, 20.25, 16.22, 21.07, 21.17, 18.22, 11.35, 19.56, 15.96, 7.5, 21.84, 20.17, 10.7, 15.96, 11.79, 10.21, 14.5, 14.45, 20.66, 12.5, 16.53, 17.87, 21.42, 20.25, 12.21, 13.54, 22.25, 12.35, 8.7, 16.58], 8: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 9: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}  # noqa: E501

# type: ignore
TOF_BASELINE_Z = {0: [10.49, 24.44, 17.42, 7.7, 11.0, 11.29, 17.42, 21.92, 19.3, 14.59, 24.37, 43.71, 558.63, 2906.72, 34691.49, 39665.0, 26511.33, 13332.04, 9128.68, 6606.06, 5520.37, 4419.73, 3681.94, 3352.36, 2834.08, 2321.95, 2170.83, 1800.39, 1701.35, 1388.2, 1363.82, 1169.21, 1052.46, 1087.02, 1028.72, 998.44, 895.0, 971.21, 761.05, 707.88, 853.03, 708.35, 690.73, 575.0, 580.28, 522.25, 479.82, 529.22, 541.76, 502.59, 544.63, 453.65, 491.28, 435.27, 411.85, 342.44, 425.35, 333.4, 303.02, 379.03, 357.27, 310.49, 275.25, 293.54, 280.36, 240.93, 242.3, 272.79, 253.61, 231.5, 218.81, 182.45, 214.16, 195.81, 160.67, 185.5, 176.83, 146.04, 149.49, 171.97, 171.85, 173.25, 135.45, 144.82, 198.39, 141.81, 139.12, 172.71, 143.9, 99.74, 135.45, 101.34, 123.24, 94.62, 85.69, 93.48, 117.45, 121.91, 96.57, 109.37, 125.18, 76.62, 91.24, 90.12, 80.57, 78.32, 90.13, 48.77, 80.0, 77.39, 72.82, 69.84, 77.42, 38.5, 52.82, 64.21, 34.29, 66.09, 66.12, 71.33, 37.74, 52.26, 42.42, 36.46, 32.22, 41.92, 28.09, 33.92], 1: [14.04, 21.97, 17.27, 13.21, 16.46, 23.42, 24.42, 18.03, 13.62, 11.24, 19.24, 38.14, 22.79, 161.63, 233.05, 85.92, 58.83, 46.62, 50.62, 48.17, 51.17, 56.01, 81.02, 65.93, 76.76, 110.02, 90.94, 124.79, 122.8, 120.26, 101.07, 115.7, 104.99, 90.83, 111.68, 78.19, 97.25, 96.32, 88.82, 84.72, 90.17, 98.95, 120.13, 135.82, 117.74, 147.05, 116.24, 121.9, 102.5, 121.89, 160.78, 110.36, 156.61, 104.93, 108.87, 140.92, 891.78, 1377.26, 1181.1, 654.13, 388.54, 266.8, 179.02, 164.28, 98.71, 1898.24, 16067.69, 27467.46, 24350.17, 14744.5, 6860.0, 3558.26, 2335.47, 1517.15, 1102.37, 1013.14, 796.37, 598.81, 457.68, 342.85, 221.74, 209.97, 149.85, 129.65, 117.63, 63.5, 67.82, 79.47, 76.5, 43.09, 54.67, 53.77, 41.1, 31.53, 28.73, 40.45, 46.5, 25.32, 30.2, 16.29, 22.09, 40.5, 19.04, 26.09, 24.58, 44.03, 20.27, 21.22, 21.03, 36.69, 27.3, 24.3, 27.06, 22.96, 26.3, 20.73, 18.27, 22.87, 13.22, 19.54, 43.92, 59.54, 38.0, 46.63, 60.74, 36.21, 37.01, 22.58], 2: [29.96, 40.09, 24.72, 52.61, 40.62, 62.79, 37.49, 43.97, 48.46, 40.54, 49.81, 47.0, 62.55, 62.42, 307.18, 425.66, 339.1, 202.2, 165.6, 98.7, 97.32, 135.15, 172.68, 182.62, 402.49, 503.78, 697.02, 801.69, 1063.22, 1158.11, 1591.05, 1879.07, 2003.67, 2027.34, 1850.95, 1671.65, 1430.27, 1309.9, 1162.28, 993.25, 906.11, 786.26, 627.85, 615.67, 534.31, 590.49, 511.73, 478.04, 550.99, 436.25, 424.39, 367.09, 390.75, 421.08, 380.58, 354.56, 353.67, 399.11, 340.8, 692.25, 1300.41, 1115.89, 663.55, 511.69, 387.53, 286.68, 298.75, 244.86, 328.17, 7702.5, 21234.22, 24587.3, 17717.36, 10131.77, 5487.67, 3644.14, 2058.53, 1662.8, 1273.34, 988.49, 740.79, 599.44, 476.83, 426.51, 327.71, 258.22, 222.68, 232.17, 136.32, 112.95, 96.49, 94.62, 70.62, 101.07, 79.05, 104.61, 59.44, 46.73, 61.04, 65.8, 53.3, 46.3, 49.94, 46.92, 52.92, 49.63, 64.22, 74.67, 78.8, 47.42, 60.05, 49.74, 47.62, 46.0, 73.89, 51.85, 82.44, 45.66, 44.49, 54.95, 40.0, 65.91, 49.84, 46.37, 53.12, 65.84, 69.37, 66.25], 3: [125.76, 89.32, 76.66, 98.43, 107.97, 109.72, 100.06, 74.69, 103.48, 91.09, 102.8, 165.16, 96.5, 210.16, 830.21, 885.05, 532.6, 328.54, 212.25, 202.24, 278.89, 470.73, 815.6, 1340.37, 2373.74, 4642.4, 6334.95, 6492.21, 4266.4, 3116.46, 2630.09, 2093.11, 2163.23, 1942.75, 1957.76, 1695.88, 1568.08, 1340.73, 1365.72, 1236.65, 1149.86, 1015.9, 861.12, 951.62, 954.31, 790.68, 884.21, 886.56, 789.83, 691.41, 650.3, 616.93, 681.46, 547.87, 461.95, 524.57, 501.02, 670.4, 568.41, 589.13, 779.65, 675.56, 572.11, 453.53, 321.0, 309.12, 340.95, 378.48, 628.36, 6491.54, 13525.49, 14741.55, 10434.25, 6093.7, 3422.0, 2307.51, 1592.43, 1199.16, 949.76, 713.6, 686.45, 511.55, 480.56, 387.54, 345.37, 285.09, 212.24, 208.78, 196.35, 213.59, 148.74, 107.21, 132.18, 120.61, 103.92, 137.94, 111.5, 143.68, 136.13, 90.95, 99.32, 119.14, 96.46, 96.45, 106.5, 102.59, 99.25, 90.82, 128.04, 98.66, 107.89, 103.74, 123.75, 77.44, 99.99, 98.45, 91.5, 129.11, 123.25, 93.59, 108.47, 92.39, 79.67, 109.7, 76.21, 130.41, 116.03, 112.61], 4: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 5: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 6: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 7: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 8: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 9: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}  # noqa: E501
# fmt: on

STACKER_TOF_BASELINE = {
    TOFSensor.X: TOF_BASELINE_X,
    TOFSensor.Z: TOF_BASELINE_Z,
}


def generate_tof_baseline(
    histograms: List[Dict[int, List[int]]], deviation: int = 6
) -> Dict[int, List[float]]:
    """Generate a TOF sensor baseline given multiple histogram readings.

    Baseline must be robust against variation the "no labware" reading of ANY
    stacker should always be below the "baseline". For each bin, we calculate
    the Mean and Standard Deviation (STD) of the samples. We then create the
    "baseline": Baseline = Mean + deviation x Standard Deviation

    @param histogram: a list of tof histogram measurements denoted as dicts of zone to bins.
    @param std: the standard deviation to use when calculating baseline, defaults to 6.
    @return: The baseline measurement.
    """
    assert len(histograms) > 1, "Need at least 2 histograms to generate a baseline."
    baseline = defaultdict(list)
    aggregate = defaultdict(lambda: defaultdict(list))  # type: ignore
    # Iterate through the histograms and create a map of zones to bin value
    # per index of each histogram.
    for histogram in zip(*(h.items() for h in histograms)):
        for zone, bins in histogram:
            assert (
                len(bins) == NUMBER_OF_BINS
            ), f"Invalid number of bins in zone {zone}, got {len(bins)} expected: {NUMBER_OF_BINS}."
            for bin, value in enumerate(bins):
                aggregate[zone][bin].append(value)

    # Iterate through the per-index bin map and calculate the threshold
    # for that specific bin.
    for zone, bins in aggregate.items():
        for bin in bins.values():
            mean = sum(bin) / len(bin)  # type: ignore
            std = statistics.pstdev(bin)  # type: ignore
            threshold = float("%.2f" % (mean + (std * deviation)))
            baseline[zone].append(threshold)
    assert (
        len(baseline) == NUMBER_OF_ZONES
    ), f"Invalid number of zones, got {len(baseline)} expected {NUMBER_OF_ZONES}"
    return dict(baseline)


def labware_detected(
    histogram: Dict[int, List[int]],
    sensor: TOFSensor,
    bins: List[int],
    zones: List[int],
) -> Dict[int, List[int]]:
    """Detect labware by subtracting baseline from histogram."""
    baseline: Dict[int, List[float]] = STACKER_TOF_BASELINE[sensor]
    diff = defaultdict(list)
    for zone in zones:
        raw_data = histogram[zone]
        baseline_data = baseline[zone]
        for bin in range(*bins):
            delta = raw_data[bin] - baseline_data[bin]
            if delta > 0:
                diff[zone].append(delta)
    return dict(diff)  # type: ignore
